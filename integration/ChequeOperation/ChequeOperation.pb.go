// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.2
// source: ChequeOperation.proto

package ChequeOperation

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	common "moneyx.golang.framework/integration/common"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChequeOperationState int32

const (
	ChequeOperationState_RemoveChequeAddReceipt    ChequeOperationState = 0
	ChequeOperationState_RemoveReceiptAddCheque    ChequeOperationState = 1
	ChequeOperationState_AddCheque                 ChequeOperationState = 2
	ChequeOperationState_RemoveDocument            ChequeOperationState = 3
	ChequeOperationState_AddDocument               ChequeOperationState = 4
	ChequeOperationState_RemoveCheque              ChequeOperationState = 5
	ChequeOperationState_RemoveChequeAddCheque     ChequeOperationState = 6
	ChequeOperationState_RemoveDocumentAddDocument ChequeOperationState = 7
)

// Enum value maps for ChequeOperationState.
var (
	ChequeOperationState_name = map[int32]string{
		0: "RemoveChequeAddReceipt",
		1: "RemoveReceiptAddCheque",
		2: "AddCheque",
		3: "RemoveDocument",
		4: "AddDocument",
		5: "RemoveCheque",
		6: "RemoveChequeAddCheque",
		7: "RemoveDocumentAddDocument",
	}
	ChequeOperationState_value = map[string]int32{
		"RemoveChequeAddReceipt":    0,
		"RemoveReceiptAddCheque":    1,
		"AddCheque":                 2,
		"RemoveDocument":            3,
		"AddDocument":               4,
		"RemoveCheque":              5,
		"RemoveChequeAddCheque":     6,
		"RemoveDocumentAddDocument": 7,
	}
)

func (x ChequeOperationState) Enum() *ChequeOperationState {
	p := new(ChequeOperationState)
	*p = x
	return p
}

func (x ChequeOperationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChequeOperationState) Descriptor() protoreflect.EnumDescriptor {
	return file_ChequeOperation_proto_enumTypes[0].Descriptor()
}

func (ChequeOperationState) Type() protoreflect.EnumType {
	return &file_ChequeOperation_proto_enumTypes[0]
}

func (x ChequeOperationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChequeOperationState.Descriptor instead.
func (ChequeOperationState) EnumDescriptor() ([]byte, []int) {
	return file_ChequeOperation_proto_rawDescGZIP(), []int{0}
}

type OperateOnBankBookChequeDocumentIntegratedCommand struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	ChequeId                 string                 `protobuf:"bytes,1,opt,name=ChequeId,proto3" json:"ChequeId,omitempty"`
	ChequeNumber             string                 `protobuf:"bytes,2,opt,name=ChequeNumber,proto3" json:"ChequeNumber,omitempty"`
	ChequeMoney              *common.Money          `protobuf:"bytes,3,opt,name=ChequeMoney,proto3" json:"ChequeMoney,omitempty"`
	BankAccountTitle         string                 `protobuf:"bytes,4,opt,name=BankAccountTitle,proto3" json:"BankAccountTitle,omitempty"`
	BankBranchName           string                 `protobuf:"bytes,5,opt,name=BankBranchName,proto3" json:"BankBranchName,omitempty"`
	ChequeRegistrationDate   int64                  `protobuf:"varint,6,opt,name=ChequeRegistrationDate,proto3" json:"ChequeRegistrationDate,omitempty"`
	DueDate                  int64                  `protobuf:"varint,7,opt,name=DueDate,proto3" json:"DueDate,omitempty"`
	Description              string                 `protobuf:"bytes,8,opt,name=Description,proto3" json:"Description,omitempty"`
	BankAccountId            string                 `protobuf:"bytes,9,opt,name=BankAccountId,proto3" json:"BankAccountId,omitempty"`
	ModifiedNewBankAccountId *common.NullableString `protobuf:"bytes,10,opt,name=ModifiedNewBankAccountId,proto3" json:"ModifiedNewBankAccountId,omitempty"`
	ChequeState              ChequeOperationState   `protobuf:"varint,11,opt,name=ChequeState,proto3,enum=ChequeOperation.ChequeOperationState" json:"ChequeState,omitempty"`
	ChequeBankName           string                 `protobuf:"bytes,12,opt,name=ChequeBankName,proto3" json:"ChequeBankName,omitempty"`
	CustomerAccountId        string                 `protobuf:"bytes,13,opt,name=CustomerAccountId,proto3" json:"CustomerAccountId,omitempty"`
	ManagerId                string                 `protobuf:"bytes,14,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId            string                 `protobuf:"bytes,15,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id                       string                 `protobuf:"bytes,16,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *OperateOnBankBookChequeDocumentIntegratedCommand) Reset() {
	*x = OperateOnBankBookChequeDocumentIntegratedCommand{}
	mi := &file_ChequeOperation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperateOnBankBookChequeDocumentIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperateOnBankBookChequeDocumentIntegratedCommand) ProtoMessage() {}

func (x *OperateOnBankBookChequeDocumentIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ChequeOperation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperateOnBankBookChequeDocumentIntegratedCommand.ProtoReflect.Descriptor instead.
func (*OperateOnBankBookChequeDocumentIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ChequeOperation_proto_rawDescGZIP(), []int{0}
}

func (x *OperateOnBankBookChequeDocumentIntegratedCommand) GetChequeId() string {
	if x != nil {
		return x.ChequeId
	}
	return ""
}

func (x *OperateOnBankBookChequeDocumentIntegratedCommand) GetChequeNumber() string {
	if x != nil {
		return x.ChequeNumber
	}
	return ""
}

func (x *OperateOnBankBookChequeDocumentIntegratedCommand) GetChequeMoney() *common.Money {
	if x != nil {
		return x.ChequeMoney
	}
	return nil
}

func (x *OperateOnBankBookChequeDocumentIntegratedCommand) GetBankAccountTitle() string {
	if x != nil {
		return x.BankAccountTitle
	}
	return ""
}

func (x *OperateOnBankBookChequeDocumentIntegratedCommand) GetBankBranchName() string {
	if x != nil {
		return x.BankBranchName
	}
	return ""
}

func (x *OperateOnBankBookChequeDocumentIntegratedCommand) GetChequeRegistrationDate() int64 {
	if x != nil {
		return x.ChequeRegistrationDate
	}
	return 0
}

func (x *OperateOnBankBookChequeDocumentIntegratedCommand) GetDueDate() int64 {
	if x != nil {
		return x.DueDate
	}
	return 0
}

func (x *OperateOnBankBookChequeDocumentIntegratedCommand) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OperateOnBankBookChequeDocumentIntegratedCommand) GetBankAccountId() string {
	if x != nil {
		return x.BankAccountId
	}
	return ""
}

func (x *OperateOnBankBookChequeDocumentIntegratedCommand) GetModifiedNewBankAccountId() *common.NullableString {
	if x != nil {
		return x.ModifiedNewBankAccountId
	}
	return nil
}

func (x *OperateOnBankBookChequeDocumentIntegratedCommand) GetChequeState() ChequeOperationState {
	if x != nil {
		return x.ChequeState
	}
	return ChequeOperationState_RemoveChequeAddReceipt
}

func (x *OperateOnBankBookChequeDocumentIntegratedCommand) GetChequeBankName() string {
	if x != nil {
		return x.ChequeBankName
	}
	return ""
}

func (x *OperateOnBankBookChequeDocumentIntegratedCommand) GetCustomerAccountId() string {
	if x != nil {
		return x.CustomerAccountId
	}
	return ""
}

func (x *OperateOnBankBookChequeDocumentIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *OperateOnBankBookChequeDocumentIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *OperateOnBankBookChequeDocumentIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type OperatedOnBankBookChequeDocumentResponseIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsCompleted   bool                   `protobuf:"varint,1,opt,name=IsCompleted,proto3" json:"IsCompleted,omitempty"`
	Failure       *common.Failure        `protobuf:"bytes,2,opt,name=Failure,proto3" json:"Failure,omitempty"`
	CorrelationId string                 `protobuf:"bytes,3,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,4,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperatedOnBankBookChequeDocumentResponseIntegratedCommand) Reset() {
	*x = OperatedOnBankBookChequeDocumentResponseIntegratedCommand{}
	mi := &file_ChequeOperation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatedOnBankBookChequeDocumentResponseIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatedOnBankBookChequeDocumentResponseIntegratedCommand) ProtoMessage() {}

func (x *OperatedOnBankBookChequeDocumentResponseIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ChequeOperation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatedOnBankBookChequeDocumentResponseIntegratedCommand.ProtoReflect.Descriptor instead.
func (*OperatedOnBankBookChequeDocumentResponseIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ChequeOperation_proto_rawDescGZIP(), []int{1}
}

func (x *OperatedOnBankBookChequeDocumentResponseIntegratedCommand) GetIsCompleted() bool {
	if x != nil {
		return x.IsCompleted
	}
	return false
}

func (x *OperatedOnBankBookChequeDocumentResponseIntegratedCommand) GetFailure() *common.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *OperatedOnBankBookChequeDocumentResponseIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *OperatedOnBankBookChequeDocumentResponseIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CommitOrRollbackBankBookOperatedChequeDocumentIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsCommited    bool                   `protobuf:"varint,1,opt,name=IsCommited,proto3" json:"IsCommited,omitempty"`
	CorrelationId string                 `protobuf:"bytes,2,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,3,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitOrRollbackBankBookOperatedChequeDocumentIntegratedCommand) Reset() {
	*x = CommitOrRollbackBankBookOperatedChequeDocumentIntegratedCommand{}
	mi := &file_ChequeOperation_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitOrRollbackBankBookOperatedChequeDocumentIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitOrRollbackBankBookOperatedChequeDocumentIntegratedCommand) ProtoMessage() {}

func (x *CommitOrRollbackBankBookOperatedChequeDocumentIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ChequeOperation_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitOrRollbackBankBookOperatedChequeDocumentIntegratedCommand.ProtoReflect.Descriptor instead.
func (*CommitOrRollbackBankBookOperatedChequeDocumentIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ChequeOperation_proto_rawDescGZIP(), []int{2}
}

func (x *CommitOrRollbackBankBookOperatedChequeDocumentIntegratedCommand) GetIsCommited() bool {
	if x != nil {
		return x.IsCommited
	}
	return false
}

func (x *CommitOrRollbackBankBookOperatedChequeDocumentIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *CommitOrRollbackBankBookOperatedChequeDocumentIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_ChequeOperation_proto protoreflect.FileDescriptor

const file_ChequeOperation_proto_rawDesc = "" +
	"\n" +
	"\x15ChequeOperation.proto\x12\x0fChequeOperation\x1a\fCommon.proto\"\xd8\x05\n" +
	"0OperateOnBankBookChequeDocumentIntegratedCommand\x12\x1a\n" +
	"\bChequeId\x18\x01 \x01(\tR\bChequeId\x12\"\n" +
	"\fChequeNumber\x18\x02 \x01(\tR\fChequeNumber\x12/\n" +
	"\vChequeMoney\x18\x03 \x01(\v2\r.Common.MoneyR\vChequeMoney\x12*\n" +
	"\x10BankAccountTitle\x18\x04 \x01(\tR\x10BankAccountTitle\x12&\n" +
	"\x0eBankBranchName\x18\x05 \x01(\tR\x0eBankBranchName\x126\n" +
	"\x16ChequeRegistrationDate\x18\x06 \x01(\x03R\x16ChequeRegistrationDate\x12\x18\n" +
	"\aDueDate\x18\a \x01(\x03R\aDueDate\x12 \n" +
	"\vDescription\x18\b \x01(\tR\vDescription\x12$\n" +
	"\rBankAccountId\x18\t \x01(\tR\rBankAccountId\x12R\n" +
	"\x18ModifiedNewBankAccountId\x18\n" +
	" \x01(\v2\x16.Common.NullableStringR\x18ModifiedNewBankAccountId\x12G\n" +
	"\vChequeState\x18\v \x01(\x0e2%.ChequeOperation.ChequeOperationStateR\vChequeState\x12&\n" +
	"\x0eChequeBankName\x18\f \x01(\tR\x0eChequeBankName\x12,\n" +
	"\x11CustomerAccountId\x18\r \x01(\tR\x11CustomerAccountId\x12\x1c\n" +
	"\tManagerId\x18\x0e \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\x0f \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x10 \x01(\tR\x02Id\"\xbe\x01\n" +
	"9OperatedOnBankBookChequeDocumentResponseIntegratedCommand\x12 \n" +
	"\vIsCompleted\x18\x01 \x01(\bR\vIsCompleted\x12)\n" +
	"\aFailure\x18\x02 \x01(\v2\x0f.Common.FailureR\aFailure\x12$\n" +
	"\rCorrelationId\x18\x03 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x04 \x01(\tR\x02Id\"\x97\x01\n" +
	"?CommitOrRollbackBankBookOperatedChequeDocumentIntegratedCommand\x12\x1e\n" +
	"\n" +
	"IsCommited\x18\x01 \x01(\bR\n" +
	"IsCommited\x12$\n" +
	"\rCorrelationId\x18\x02 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x03 \x01(\tR\x02Id*\xce\x01\n" +
	"\x14ChequeOperationState\x12\x1a\n" +
	"\x16RemoveChequeAddReceipt\x10\x00\x12\x1a\n" +
	"\x16RemoveReceiptAddCheque\x10\x01\x12\r\n" +
	"\tAddCheque\x10\x02\x12\x12\n" +
	"\x0eRemoveDocument\x10\x03\x12\x0f\n" +
	"\vAddDocument\x10\x04\x12\x10\n" +
	"\fRemoveCheque\x10\x05\x12\x19\n" +
	"\x15RemoveChequeAddCheque\x10\x06\x12\x1d\n" +
	"\x19RemoveDocumentAddDocument\x10\aB`Z3moneyx.golang.framework/integration/ChequeOperation\xaa\x02(Ariyana.Framework.Schema.ChequeOperationb\x06proto3"

var (
	file_ChequeOperation_proto_rawDescOnce sync.Once
	file_ChequeOperation_proto_rawDescData []byte
)

func file_ChequeOperation_proto_rawDescGZIP() []byte {
	file_ChequeOperation_proto_rawDescOnce.Do(func() {
		file_ChequeOperation_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ChequeOperation_proto_rawDesc), len(file_ChequeOperation_proto_rawDesc)))
	})
	return file_ChequeOperation_proto_rawDescData
}

var file_ChequeOperation_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ChequeOperation_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_ChequeOperation_proto_goTypes = []any{
	(ChequeOperationState)(0),                                               // 0: ChequeOperation.ChequeOperationState
	(*OperateOnBankBookChequeDocumentIntegratedCommand)(nil),                // 1: ChequeOperation.OperateOnBankBookChequeDocumentIntegratedCommand
	(*OperatedOnBankBookChequeDocumentResponseIntegratedCommand)(nil),       // 2: ChequeOperation.OperatedOnBankBookChequeDocumentResponseIntegratedCommand
	(*CommitOrRollbackBankBookOperatedChequeDocumentIntegratedCommand)(nil), // 3: ChequeOperation.CommitOrRollbackBankBookOperatedChequeDocumentIntegratedCommand
	(*common.Money)(nil),          // 4: Common.Money
	(*common.NullableString)(nil), // 5: Common.NullableString
	(*common.Failure)(nil),        // 6: Common.Failure
}
var file_ChequeOperation_proto_depIdxs = []int32{
	4, // 0: ChequeOperation.OperateOnBankBookChequeDocumentIntegratedCommand.ChequeMoney:type_name -> Common.Money
	5, // 1: ChequeOperation.OperateOnBankBookChequeDocumentIntegratedCommand.ModifiedNewBankAccountId:type_name -> Common.NullableString
	0, // 2: ChequeOperation.OperateOnBankBookChequeDocumentIntegratedCommand.ChequeState:type_name -> ChequeOperation.ChequeOperationState
	6, // 3: ChequeOperation.OperatedOnBankBookChequeDocumentResponseIntegratedCommand.Failure:type_name -> Common.Failure
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_ChequeOperation_proto_init() }
func file_ChequeOperation_proto_init() {
	if File_ChequeOperation_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ChequeOperation_proto_rawDesc), len(file_ChequeOperation_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ChequeOperation_proto_goTypes,
		DependencyIndexes: file_ChequeOperation_proto_depIdxs,
		EnumInfos:         file_ChequeOperation_proto_enumTypes,
		MessageInfos:      file_ChequeOperation_proto_msgTypes,
	}.Build()
	File_ChequeOperation_proto = out.File
	file_ChequeOperation_proto_goTypes = nil
	file_ChequeOperation_proto_depIdxs = nil
}
