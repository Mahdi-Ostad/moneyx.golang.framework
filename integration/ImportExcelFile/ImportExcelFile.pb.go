// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.2
// source: ImportExcelFile.proto

package ImportExcelFile

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	common "moneyx.golang.framework/integration/common"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ImportExcelFileDocumentsResponseIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsDone        bool                   `protobuf:"varint,1,opt,name=IsDone,proto3" json:"IsDone,omitempty"`
	Failure       *common.Failure        `protobuf:"bytes,2,opt,name=Failure,proto3" json:"Failure,omitempty"`
	CorrelationId string                 `protobuf:"bytes,3,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,4,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportExcelFileDocumentsResponseIntegratedCommand) Reset() {
	*x = ImportExcelFileDocumentsResponseIntegratedCommand{}
	mi := &file_ImportExcelFile_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportExcelFileDocumentsResponseIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportExcelFileDocumentsResponseIntegratedCommand) ProtoMessage() {}

func (x *ImportExcelFileDocumentsResponseIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ImportExcelFile_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportExcelFileDocumentsResponseIntegratedCommand.ProtoReflect.Descriptor instead.
func (*ImportExcelFileDocumentsResponseIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ImportExcelFile_proto_rawDescGZIP(), []int{0}
}

func (x *ImportExcelFileDocumentsResponseIntegratedCommand) GetIsDone() bool {
	if x != nil {
		return x.IsDone
	}
	return false
}

func (x *ImportExcelFileDocumentsResponseIntegratedCommand) GetFailure() *common.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *ImportExcelFileDocumentsResponseIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *ImportExcelFileDocumentsResponseIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ImportExcelFileDocumentsIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExcelRecords  []*ExcelRecord         `protobuf:"bytes,1,rep,name=ExcelRecords,proto3" json:"ExcelRecords,omitempty"`
	BankId        string                 `protobuf:"bytes,2,opt,name=BankId,proto3" json:"BankId,omitempty"`
	ManagerId     string                 `protobuf:"bytes,3,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId string                 `protobuf:"bytes,4,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,5,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportExcelFileDocumentsIntegratedCommand) Reset() {
	*x = ImportExcelFileDocumentsIntegratedCommand{}
	mi := &file_ImportExcelFile_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportExcelFileDocumentsIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportExcelFileDocumentsIntegratedCommand) ProtoMessage() {}

func (x *ImportExcelFileDocumentsIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ImportExcelFile_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportExcelFileDocumentsIntegratedCommand.ProtoReflect.Descriptor instead.
func (*ImportExcelFileDocumentsIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ImportExcelFile_proto_rawDescGZIP(), []int{1}
}

func (x *ImportExcelFileDocumentsIntegratedCommand) GetExcelRecords() []*ExcelRecord {
	if x != nil {
		return x.ExcelRecords
	}
	return nil
}

func (x *ImportExcelFileDocumentsIntegratedCommand) GetBankId() string {
	if x != nil {
		return x.BankId
	}
	return ""
}

func (x *ImportExcelFileDocumentsIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *ImportExcelFileDocumentsIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *ImportExcelFileDocumentsIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ExcelRecord struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	IsDebtor         bool                   `protobuf:"varint,1,opt,name=IsDebtor,proto3" json:"IsDebtor,omitempty"`
	Date             int64                  `protobuf:"varint,2,opt,name=Date,proto3" json:"Date,omitempty"`
	BankAccountTitle string                 `protobuf:"bytes,3,opt,name=BankAccountTitle,proto3" json:"BankAccountTitle,omitempty"`
	BranchName       string                 `protobuf:"bytes,4,opt,name=BranchName,proto3" json:"BranchName,omitempty"`
	ReceiptNumber    string                 `protobuf:"bytes,5,opt,name=ReceiptNumber,proto3" json:"ReceiptNumber,omitempty"`
	TarnsactionMoney *common.Money          `protobuf:"bytes,6,opt,name=TarnsactionMoney,proto3" json:"TarnsactionMoney,omitempty"`
	TransactionId    string                 `protobuf:"bytes,7,opt,name=TransactionId,proto3" json:"TransactionId,omitempty"`
	Description      string                 `protobuf:"bytes,8,opt,name=Description,proto3" json:"Description,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ExcelRecord) Reset() {
	*x = ExcelRecord{}
	mi := &file_ImportExcelFile_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExcelRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExcelRecord) ProtoMessage() {}

func (x *ExcelRecord) ProtoReflect() protoreflect.Message {
	mi := &file_ImportExcelFile_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExcelRecord.ProtoReflect.Descriptor instead.
func (*ExcelRecord) Descriptor() ([]byte, []int) {
	return file_ImportExcelFile_proto_rawDescGZIP(), []int{2}
}

func (x *ExcelRecord) GetIsDebtor() bool {
	if x != nil {
		return x.IsDebtor
	}
	return false
}

func (x *ExcelRecord) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ExcelRecord) GetBankAccountTitle() string {
	if x != nil {
		return x.BankAccountTitle
	}
	return ""
}

func (x *ExcelRecord) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *ExcelRecord) GetReceiptNumber() string {
	if x != nil {
		return x.ReceiptNumber
	}
	return ""
}

func (x *ExcelRecord) GetTarnsactionMoney() *common.Money {
	if x != nil {
		return x.TarnsactionMoney
	}
	return nil
}

func (x *ExcelRecord) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *ExcelRecord) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CommitOrRollBackImportedExcelFileDocuments struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsCompleted   bool                   `protobuf:"varint,1,opt,name=IsCompleted,proto3" json:"IsCompleted,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	CorrelationId string                 `protobuf:"bytes,3,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,4,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitOrRollBackImportedExcelFileDocuments) Reset() {
	*x = CommitOrRollBackImportedExcelFileDocuments{}
	mi := &file_ImportExcelFile_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitOrRollBackImportedExcelFileDocuments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitOrRollBackImportedExcelFileDocuments) ProtoMessage() {}

func (x *CommitOrRollBackImportedExcelFileDocuments) ProtoReflect() protoreflect.Message {
	mi := &file_ImportExcelFile_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitOrRollBackImportedExcelFileDocuments.ProtoReflect.Descriptor instead.
func (*CommitOrRollBackImportedExcelFileDocuments) Descriptor() ([]byte, []int) {
	return file_ImportExcelFile_proto_rawDescGZIP(), []int{3}
}

func (x *CommitOrRollBackImportedExcelFileDocuments) GetIsCompleted() bool {
	if x != nil {
		return x.IsCompleted
	}
	return false
}

func (x *CommitOrRollBackImportedExcelFileDocuments) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommitOrRollBackImportedExcelFileDocuments) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *CommitOrRollBackImportedExcelFileDocuments) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_ImportExcelFile_proto protoreflect.FileDescriptor

const file_ImportExcelFile_proto_rawDesc = "" +
	"\n" +
	"\x15ImportExcelFile.proto\x12\x0fImportExcelFile\x1a\fCommon.proto\"\xac\x01\n" +
	"1ImportExcelFileDocumentsResponseIntegratedCommand\x12\x16\n" +
	"\x06IsDone\x18\x01 \x01(\bR\x06IsDone\x12)\n" +
	"\aFailure\x18\x02 \x01(\v2\x0f.Common.FailureR\aFailure\x12$\n" +
	"\rCorrelationId\x18\x03 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x04 \x01(\tR\x02Id\"\xd9\x01\n" +
	")ImportExcelFileDocumentsIntegratedCommand\x12@\n" +
	"\fExcelRecords\x18\x01 \x03(\v2\x1c.ImportExcelFile.ExcelRecordR\fExcelRecords\x12\x16\n" +
	"\x06BankId\x18\x02 \x01(\tR\x06BankId\x12\x1c\n" +
	"\tManagerId\x18\x03 \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\x04 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x05 \x01(\tR\x02Id\"\xb2\x02\n" +
	"\vExcelRecord\x12\x1a\n" +
	"\bIsDebtor\x18\x01 \x01(\bR\bIsDebtor\x12\x12\n" +
	"\x04Date\x18\x02 \x01(\x03R\x04Date\x12*\n" +
	"\x10BankAccountTitle\x18\x03 \x01(\tR\x10BankAccountTitle\x12\x1e\n" +
	"\n" +
	"BranchName\x18\x04 \x01(\tR\n" +
	"BranchName\x12$\n" +
	"\rReceiptNumber\x18\x05 \x01(\tR\rReceiptNumber\x129\n" +
	"\x10TarnsactionMoney\x18\x06 \x01(\v2\r.Common.MoneyR\x10TarnsactionMoney\x12$\n" +
	"\rTransactionId\x18\a \x01(\tR\rTransactionId\x12 \n" +
	"\vDescription\x18\b \x01(\tR\vDescription\"\x9e\x01\n" +
	"*CommitOrRollBackImportedExcelFileDocuments\x12 \n" +
	"\vIsCompleted\x18\x01 \x01(\bR\vIsCompleted\x12\x18\n" +
	"\aMessage\x18\x02 \x01(\tR\aMessage\x12$\n" +
	"\rCorrelationId\x18\x03 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x04 \x01(\tR\x02IdB`Z3moneyx.golang.framework/integration/ImportExcelFile\xaa\x02(Ariyana.Framework.Schema.ImportExcelFileb\x06proto3"

var (
	file_ImportExcelFile_proto_rawDescOnce sync.Once
	file_ImportExcelFile_proto_rawDescData []byte
)

func file_ImportExcelFile_proto_rawDescGZIP() []byte {
	file_ImportExcelFile_proto_rawDescOnce.Do(func() {
		file_ImportExcelFile_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ImportExcelFile_proto_rawDesc), len(file_ImportExcelFile_proto_rawDesc)))
	})
	return file_ImportExcelFile_proto_rawDescData
}

var file_ImportExcelFile_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ImportExcelFile_proto_goTypes = []any{
	(*ImportExcelFileDocumentsResponseIntegratedCommand)(nil), // 0: ImportExcelFile.ImportExcelFileDocumentsResponseIntegratedCommand
	(*ImportExcelFileDocumentsIntegratedCommand)(nil),         // 1: ImportExcelFile.ImportExcelFileDocumentsIntegratedCommand
	(*ExcelRecord)(nil), // 2: ImportExcelFile.ExcelRecord
	(*CommitOrRollBackImportedExcelFileDocuments)(nil), // 3: ImportExcelFile.CommitOrRollBackImportedExcelFileDocuments
	(*common.Failure)(nil),                             // 4: Common.Failure
	(*common.Money)(nil),                               // 5: Common.Money
}
var file_ImportExcelFile_proto_depIdxs = []int32{
	4, // 0: ImportExcelFile.ImportExcelFileDocumentsResponseIntegratedCommand.Failure:type_name -> Common.Failure
	2, // 1: ImportExcelFile.ImportExcelFileDocumentsIntegratedCommand.ExcelRecords:type_name -> ImportExcelFile.ExcelRecord
	5, // 2: ImportExcelFile.ExcelRecord.TarnsactionMoney:type_name -> Common.Money
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_ImportExcelFile_proto_init() }
func file_ImportExcelFile_proto_init() {
	if File_ImportExcelFile_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ImportExcelFile_proto_rawDesc), len(file_ImportExcelFile_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ImportExcelFile_proto_goTypes,
		DependencyIndexes: file_ImportExcelFile_proto_depIdxs,
		MessageInfos:      file_ImportExcelFile_proto_msgTypes,
	}.Build()
	File_ImportExcelFile_proto = out.File
	file_ImportExcelFile_proto_goTypes = nil
	file_ImportExcelFile_proto_depIdxs = nil
}
