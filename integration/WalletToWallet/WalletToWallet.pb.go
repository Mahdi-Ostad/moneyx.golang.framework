// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.2
// source: WalletToWallet.proto

package WalletToWallet

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	common "moneyx.golang.framework/integration/common"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddCustomerAccountDocumentsWalletToWalletIntegratedCommand struct {
	state            protoimpl.MessageState         `protogen:"open.v1"`
	SenderMetadata   *CustomerAccountWalletMetadata `protobuf:"bytes,1,opt,name=SenderMetadata,proto3" json:"SenderMetadata,omitempty"`
	ReceiverMetadata *CustomerAccountWalletMetadata `protobuf:"bytes,2,opt,name=ReceiverMetadata,proto3" json:"ReceiverMetadata,omitempty"`
	TransactionId    string                         `protobuf:"bytes,3,opt,name=TransactionId,proto3" json:"TransactionId,omitempty"`
	Date             int64                          `protobuf:"varint,4,opt,name=Date,proto3" json:"Date,omitempty"`
	CorrelationId    string                         `protobuf:"bytes,5,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id               string                         `protobuf:"bytes,6,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AddCustomerAccountDocumentsWalletToWalletIntegratedCommand) Reset() {
	*x = AddCustomerAccountDocumentsWalletToWalletIntegratedCommand{}
	mi := &file_WalletToWallet_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCustomerAccountDocumentsWalletToWalletIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCustomerAccountDocumentsWalletToWalletIntegratedCommand) ProtoMessage() {}

func (x *AddCustomerAccountDocumentsWalletToWalletIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_WalletToWallet_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCustomerAccountDocumentsWalletToWalletIntegratedCommand.ProtoReflect.Descriptor instead.
func (*AddCustomerAccountDocumentsWalletToWalletIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_WalletToWallet_proto_rawDescGZIP(), []int{0}
}

func (x *AddCustomerAccountDocumentsWalletToWalletIntegratedCommand) GetSenderMetadata() *CustomerAccountWalletMetadata {
	if x != nil {
		return x.SenderMetadata
	}
	return nil
}

func (x *AddCustomerAccountDocumentsWalletToWalletIntegratedCommand) GetReceiverMetadata() *CustomerAccountWalletMetadata {
	if x != nil {
		return x.ReceiverMetadata
	}
	return nil
}

func (x *AddCustomerAccountDocumentsWalletToWalletIntegratedCommand) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *AddCustomerAccountDocumentsWalletToWalletIntegratedCommand) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *AddCustomerAccountDocumentsWalletToWalletIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *AddCustomerAccountDocumentsWalletToWalletIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AddCustomerAccountDocumentsWalletToWalletResponseIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsDone        bool                   `protobuf:"varint,1,opt,name=IsDone,proto3" json:"IsDone,omitempty"`
	Failure       *common.Failure        `protobuf:"bytes,2,opt,name=Failure,proto3" json:"Failure,omitempty"`
	CorrelationId string                 `protobuf:"bytes,3,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,4,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddCustomerAccountDocumentsWalletToWalletResponseIntegratedCommand) Reset() {
	*x = AddCustomerAccountDocumentsWalletToWalletResponseIntegratedCommand{}
	mi := &file_WalletToWallet_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCustomerAccountDocumentsWalletToWalletResponseIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCustomerAccountDocumentsWalletToWalletResponseIntegratedCommand) ProtoMessage() {}

func (x *AddCustomerAccountDocumentsWalletToWalletResponseIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_WalletToWallet_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCustomerAccountDocumentsWalletToWalletResponseIntegratedCommand.ProtoReflect.Descriptor instead.
func (*AddCustomerAccountDocumentsWalletToWalletResponseIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_WalletToWallet_proto_rawDescGZIP(), []int{1}
}

func (x *AddCustomerAccountDocumentsWalletToWalletResponseIntegratedCommand) GetIsDone() bool {
	if x != nil {
		return x.IsDone
	}
	return false
}

func (x *AddCustomerAccountDocumentsWalletToWalletResponseIntegratedCommand) GetFailure() *common.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *AddCustomerAccountDocumentsWalletToWalletResponseIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *AddCustomerAccountDocumentsWalletToWalletResponseIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CommitOrRollbackAddCustomerAccountDocumentsWalletToWalletIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsCommitted   bool                   `protobuf:"varint,1,opt,name=IsCommitted,proto3" json:"IsCommitted,omitempty"`
	CorrelationId string                 `protobuf:"bytes,2,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,3,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitOrRollbackAddCustomerAccountDocumentsWalletToWalletIntegratedCommand) Reset() {
	*x = CommitOrRollbackAddCustomerAccountDocumentsWalletToWalletIntegratedCommand{}
	mi := &file_WalletToWallet_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitOrRollbackAddCustomerAccountDocumentsWalletToWalletIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitOrRollbackAddCustomerAccountDocumentsWalletToWalletIntegratedCommand) ProtoMessage() {}

func (x *CommitOrRollbackAddCustomerAccountDocumentsWalletToWalletIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_WalletToWallet_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitOrRollbackAddCustomerAccountDocumentsWalletToWalletIntegratedCommand.ProtoReflect.Descriptor instead.
func (*CommitOrRollbackAddCustomerAccountDocumentsWalletToWalletIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_WalletToWallet_proto_rawDescGZIP(), []int{2}
}

func (x *CommitOrRollbackAddCustomerAccountDocumentsWalletToWalletIntegratedCommand) GetIsCommitted() bool {
	if x != nil {
		return x.IsCommitted
	}
	return false
}

func (x *CommitOrRollbackAddCustomerAccountDocumentsWalletToWalletIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *CommitOrRollbackAddCustomerAccountDocumentsWalletToWalletIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CustomerAccountWalletMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     string                 `protobuf:"bytes,1,opt,name=AccountId,proto3" json:"AccountId,omitempty"`
	CustomerId    string                 `protobuf:"bytes,2,opt,name=CustomerId,proto3" json:"CustomerId,omitempty"`
	ManagerId     string                 `protobuf:"bytes,3,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	Money         *common.MoneyDocument  `protobuf:"bytes,4,opt,name=Money,proto3" json:"Money,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomerAccountWalletMetadata) Reset() {
	*x = CustomerAccountWalletMetadata{}
	mi := &file_WalletToWallet_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomerAccountWalletMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerAccountWalletMetadata) ProtoMessage() {}

func (x *CustomerAccountWalletMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_WalletToWallet_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerAccountWalletMetadata.ProtoReflect.Descriptor instead.
func (*CustomerAccountWalletMetadata) Descriptor() ([]byte, []int) {
	return file_WalletToWallet_proto_rawDescGZIP(), []int{3}
}

func (x *CustomerAccountWalletMetadata) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CustomerAccountWalletMetadata) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *CustomerAccountWalletMetadata) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *CustomerAccountWalletMetadata) GetMoney() *common.MoneyDocument {
	if x != nil {
		return x.Money
	}
	return nil
}

type ExchangerWalletMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     string                 `protobuf:"bytes,1,opt,name=AccountId,proto3" json:"AccountId,omitempty"`
	ManagerId     string                 `protobuf:"bytes,2,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	Money         *common.MoneyDocument  `protobuf:"bytes,3,opt,name=Money,proto3" json:"Money,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExchangerWalletMetadata) Reset() {
	*x = ExchangerWalletMetadata{}
	mi := &file_WalletToWallet_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangerWalletMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangerWalletMetadata) ProtoMessage() {}

func (x *ExchangerWalletMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_WalletToWallet_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangerWalletMetadata.ProtoReflect.Descriptor instead.
func (*ExchangerWalletMetadata) Descriptor() ([]byte, []int) {
	return file_WalletToWallet_proto_rawDescGZIP(), []int{4}
}

func (x *ExchangerWalletMetadata) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ExchangerWalletMetadata) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *ExchangerWalletMetadata) GetMoney() *common.MoneyDocument {
	if x != nil {
		return x.Money
	}
	return nil
}

type AddExchangerDocumentsWalletToWalletIntegratedCommand struct {
	state            protoimpl.MessageState   `protogen:"open.v1"`
	SenderMetadata   *ExchangerWalletMetadata `protobuf:"bytes,1,opt,name=SenderMetadata,proto3" json:"SenderMetadata,omitempty"`
	ReceiverMetadata *ExchangerWalletMetadata `protobuf:"bytes,2,opt,name=ReceiverMetadata,proto3" json:"ReceiverMetadata,omitempty"`
	TransactionId    string                   `protobuf:"bytes,3,opt,name=TransactionId,proto3" json:"TransactionId,omitempty"`
	Date             int64                    `protobuf:"varint,4,opt,name=Date,proto3" json:"Date,omitempty"`
	CorrelationId    string                   `protobuf:"bytes,5,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id               string                   `protobuf:"bytes,6,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AddExchangerDocumentsWalletToWalletIntegratedCommand) Reset() {
	*x = AddExchangerDocumentsWalletToWalletIntegratedCommand{}
	mi := &file_WalletToWallet_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddExchangerDocumentsWalletToWalletIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddExchangerDocumentsWalletToWalletIntegratedCommand) ProtoMessage() {}

func (x *AddExchangerDocumentsWalletToWalletIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_WalletToWallet_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddExchangerDocumentsWalletToWalletIntegratedCommand.ProtoReflect.Descriptor instead.
func (*AddExchangerDocumentsWalletToWalletIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_WalletToWallet_proto_rawDescGZIP(), []int{5}
}

func (x *AddExchangerDocumentsWalletToWalletIntegratedCommand) GetSenderMetadata() *ExchangerWalletMetadata {
	if x != nil {
		return x.SenderMetadata
	}
	return nil
}

func (x *AddExchangerDocumentsWalletToWalletIntegratedCommand) GetReceiverMetadata() *ExchangerWalletMetadata {
	if x != nil {
		return x.ReceiverMetadata
	}
	return nil
}

func (x *AddExchangerDocumentsWalletToWalletIntegratedCommand) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *AddExchangerDocumentsWalletToWalletIntegratedCommand) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *AddExchangerDocumentsWalletToWalletIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *AddExchangerDocumentsWalletToWalletIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AddExchangerDocumentsWalletToWalletResponseIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsDone        bool                   `protobuf:"varint,1,opt,name=IsDone,proto3" json:"IsDone,omitempty"`
	Failure       *common.Failure        `protobuf:"bytes,2,opt,name=Failure,proto3" json:"Failure,omitempty"`
	CorrelationId string                 `protobuf:"bytes,3,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,4,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddExchangerDocumentsWalletToWalletResponseIntegratedCommand) Reset() {
	*x = AddExchangerDocumentsWalletToWalletResponseIntegratedCommand{}
	mi := &file_WalletToWallet_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddExchangerDocumentsWalletToWalletResponseIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddExchangerDocumentsWalletToWalletResponseIntegratedCommand) ProtoMessage() {}

func (x *AddExchangerDocumentsWalletToWalletResponseIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_WalletToWallet_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddExchangerDocumentsWalletToWalletResponseIntegratedCommand.ProtoReflect.Descriptor instead.
func (*AddExchangerDocumentsWalletToWalletResponseIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_WalletToWallet_proto_rawDescGZIP(), []int{6}
}

func (x *AddExchangerDocumentsWalletToWalletResponseIntegratedCommand) GetIsDone() bool {
	if x != nil {
		return x.IsDone
	}
	return false
}

func (x *AddExchangerDocumentsWalletToWalletResponseIntegratedCommand) GetFailure() *common.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *AddExchangerDocumentsWalletToWalletResponseIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *AddExchangerDocumentsWalletToWalletResponseIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CommitOrRollbackAddExchangerDocumentsWalletToWalletIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsCommitted   bool                   `protobuf:"varint,1,opt,name=IsCommitted,proto3" json:"IsCommitted,omitempty"`
	CorrelationId string                 `protobuf:"bytes,2,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,3,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitOrRollbackAddExchangerDocumentsWalletToWalletIntegratedCommand) Reset() {
	*x = CommitOrRollbackAddExchangerDocumentsWalletToWalletIntegratedCommand{}
	mi := &file_WalletToWallet_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitOrRollbackAddExchangerDocumentsWalletToWalletIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitOrRollbackAddExchangerDocumentsWalletToWalletIntegratedCommand) ProtoMessage() {}

func (x *CommitOrRollbackAddExchangerDocumentsWalletToWalletIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_WalletToWallet_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitOrRollbackAddExchangerDocumentsWalletToWalletIntegratedCommand.ProtoReflect.Descriptor instead.
func (*CommitOrRollbackAddExchangerDocumentsWalletToWalletIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_WalletToWallet_proto_rawDescGZIP(), []int{7}
}

func (x *CommitOrRollbackAddExchangerDocumentsWalletToWalletIntegratedCommand) GetIsCommitted() bool {
	if x != nil {
		return x.IsCommitted
	}
	return false
}

func (x *CommitOrRollbackAddExchangerDocumentsWalletToWalletIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *CommitOrRollbackAddExchangerDocumentsWalletToWalletIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CustomerActivationMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserName      string                 `protobuf:"bytes,1,opt,name=UserName,proto3" json:"UserName,omitempty"`
	AccountId     string                 `protobuf:"bytes,2,opt,name=AccountId,proto3" json:"AccountId,omitempty"`
	ManagerId     string                 `protobuf:"bytes,3,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomerActivationMetadata) Reset() {
	*x = CustomerActivationMetadata{}
	mi := &file_WalletToWallet_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomerActivationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerActivationMetadata) ProtoMessage() {}

func (x *CustomerActivationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_WalletToWallet_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerActivationMetadata.ProtoReflect.Descriptor instead.
func (*CustomerActivationMetadata) Descriptor() ([]byte, []int) {
	return file_WalletToWallet_proto_rawDescGZIP(), []int{8}
}

func (x *CustomerActivationMetadata) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CustomerActivationMetadata) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CustomerActivationMetadata) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

type WalletToWalletCheckTransferLimitIntegratedMessage struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SenderManagerId string                 `protobuf:"bytes,1,opt,name=SenderManagerId,proto3" json:"SenderManagerId,omitempty"`
	SenderMoney     *common.Money          `protobuf:"bytes,2,opt,name=SenderMoney,proto3" json:"SenderMoney,omitempty"`
	CorrelationId   string                 `protobuf:"bytes,3,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id              string                 `protobuf:"bytes,4,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *WalletToWalletCheckTransferLimitIntegratedMessage) Reset() {
	*x = WalletToWalletCheckTransferLimitIntegratedMessage{}
	mi := &file_WalletToWallet_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletToWalletCheckTransferLimitIntegratedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletToWalletCheckTransferLimitIntegratedMessage) ProtoMessage() {}

func (x *WalletToWalletCheckTransferLimitIntegratedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WalletToWallet_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletToWalletCheckTransferLimitIntegratedMessage.ProtoReflect.Descriptor instead.
func (*WalletToWalletCheckTransferLimitIntegratedMessage) Descriptor() ([]byte, []int) {
	return file_WalletToWallet_proto_rawDescGZIP(), []int{9}
}

func (x *WalletToWalletCheckTransferLimitIntegratedMessage) GetSenderManagerId() string {
	if x != nil {
		return x.SenderManagerId
	}
	return ""
}

func (x *WalletToWalletCheckTransferLimitIntegratedMessage) GetSenderMoney() *common.Money {
	if x != nil {
		return x.SenderMoney
	}
	return nil
}

func (x *WalletToWalletCheckTransferLimitIntegratedMessage) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *WalletToWalletCheckTransferLimitIntegratedMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type WalletToWalletCheckTransferLimitResponseIntegratedMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsDone        bool                   `protobuf:"varint,1,opt,name=IsDone,proto3" json:"IsDone,omitempty"`
	Failure       *common.Failure        `protobuf:"bytes,2,opt,name=Failure,proto3" json:"Failure,omitempty"`
	CorrelationId string                 `protobuf:"bytes,3,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,4,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WalletToWalletCheckTransferLimitResponseIntegratedMessage) Reset() {
	*x = WalletToWalletCheckTransferLimitResponseIntegratedMessage{}
	mi := &file_WalletToWallet_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletToWalletCheckTransferLimitResponseIntegratedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletToWalletCheckTransferLimitResponseIntegratedMessage) ProtoMessage() {}

func (x *WalletToWalletCheckTransferLimitResponseIntegratedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_WalletToWallet_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletToWalletCheckTransferLimitResponseIntegratedMessage.ProtoReflect.Descriptor instead.
func (*WalletToWalletCheckTransferLimitResponseIntegratedMessage) Descriptor() ([]byte, []int) {
	return file_WalletToWallet_proto_rawDescGZIP(), []int{10}
}

func (x *WalletToWalletCheckTransferLimitResponseIntegratedMessage) GetIsDone() bool {
	if x != nil {
		return x.IsDone
	}
	return false
}

func (x *WalletToWalletCheckTransferLimitResponseIntegratedMessage) GetFailure() *common.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *WalletToWalletCheckTransferLimitResponseIntegratedMessage) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *WalletToWalletCheckTransferLimitResponseIntegratedMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type WalletToWalletCheckManagerIntegratedCommand struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SenderManagerId   string                 `protobuf:"bytes,1,opt,name=SenderManagerId,proto3" json:"SenderManagerId,omitempty"`
	ReceiverManagerId string                 `protobuf:"bytes,2,opt,name=ReceiverManagerId,proto3" json:"ReceiverManagerId,omitempty"`
	CorrelationId     string                 `protobuf:"bytes,3,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id                string                 `protobuf:"bytes,4,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *WalletToWalletCheckManagerIntegratedCommand) Reset() {
	*x = WalletToWalletCheckManagerIntegratedCommand{}
	mi := &file_WalletToWallet_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletToWalletCheckManagerIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletToWalletCheckManagerIntegratedCommand) ProtoMessage() {}

func (x *WalletToWalletCheckManagerIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_WalletToWallet_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletToWalletCheckManagerIntegratedCommand.ProtoReflect.Descriptor instead.
func (*WalletToWalletCheckManagerIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_WalletToWallet_proto_rawDescGZIP(), []int{11}
}

func (x *WalletToWalletCheckManagerIntegratedCommand) GetSenderManagerId() string {
	if x != nil {
		return x.SenderManagerId
	}
	return ""
}

func (x *WalletToWalletCheckManagerIntegratedCommand) GetReceiverManagerId() string {
	if x != nil {
		return x.ReceiverManagerId
	}
	return ""
}

func (x *WalletToWalletCheckManagerIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *WalletToWalletCheckManagerIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type WalletToWalletCheckManagerResponseIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsDone        bool                   `protobuf:"varint,1,opt,name=IsDone,proto3" json:"IsDone,omitempty"`
	Failure       *common.Failure        `protobuf:"bytes,2,opt,name=Failure,proto3" json:"Failure,omitempty"`
	CorrelationId string                 `protobuf:"bytes,3,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,4,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WalletToWalletCheckManagerResponseIntegratedCommand) Reset() {
	*x = WalletToWalletCheckManagerResponseIntegratedCommand{}
	mi := &file_WalletToWallet_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletToWalletCheckManagerResponseIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletToWalletCheckManagerResponseIntegratedCommand) ProtoMessage() {}

func (x *WalletToWalletCheckManagerResponseIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_WalletToWallet_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletToWalletCheckManagerResponseIntegratedCommand.ProtoReflect.Descriptor instead.
func (*WalletToWalletCheckManagerResponseIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_WalletToWallet_proto_rawDescGZIP(), []int{12}
}

func (x *WalletToWalletCheckManagerResponseIntegratedCommand) GetIsDone() bool {
	if x != nil {
		return x.IsDone
	}
	return false
}

func (x *WalletToWalletCheckManagerResponseIntegratedCommand) GetFailure() *common.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *WalletToWalletCheckManagerResponseIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *WalletToWalletCheckManagerResponseIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type WalletToWalletCheckCustomerActivationIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserName      string                 `protobuf:"bytes,1,opt,name=UserName,proto3" json:"UserName,omitempty"`
	AccountId     string                 `protobuf:"bytes,2,opt,name=AccountId,proto3" json:"AccountId,omitempty"`
	ManagerId     string                 `protobuf:"bytes,3,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId string                 `protobuf:"bytes,4,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,5,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WalletToWalletCheckCustomerActivationIntegratedCommand) Reset() {
	*x = WalletToWalletCheckCustomerActivationIntegratedCommand{}
	mi := &file_WalletToWallet_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletToWalletCheckCustomerActivationIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletToWalletCheckCustomerActivationIntegratedCommand) ProtoMessage() {}

func (x *WalletToWalletCheckCustomerActivationIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_WalletToWallet_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletToWalletCheckCustomerActivationIntegratedCommand.ProtoReflect.Descriptor instead.
func (*WalletToWalletCheckCustomerActivationIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_WalletToWallet_proto_rawDescGZIP(), []int{13}
}

func (x *WalletToWalletCheckCustomerActivationIntegratedCommand) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *WalletToWalletCheckCustomerActivationIntegratedCommand) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *WalletToWalletCheckCustomerActivationIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *WalletToWalletCheckCustomerActivationIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *WalletToWalletCheckCustomerActivationIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type WalletToWalletCheckCustomerActivationResponseIntegratedCommand struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	IsDone           bool                   `protobuf:"varint,1,opt,name=IsDone,proto3" json:"IsDone,omitempty"`
	SenderCustomerId string                 `protobuf:"bytes,2,opt,name=SenderCustomerId,proto3" json:"SenderCustomerId,omitempty"`
	Failure          *common.Failure        `protobuf:"bytes,3,opt,name=Failure,proto3" json:"Failure,omitempty"`
	CorrelationId    string                 `protobuf:"bytes,4,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id               string                 `protobuf:"bytes,5,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *WalletToWalletCheckCustomerActivationResponseIntegratedCommand) Reset() {
	*x = WalletToWalletCheckCustomerActivationResponseIntegratedCommand{}
	mi := &file_WalletToWallet_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletToWalletCheckCustomerActivationResponseIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletToWalletCheckCustomerActivationResponseIntegratedCommand) ProtoMessage() {}

func (x *WalletToWalletCheckCustomerActivationResponseIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_WalletToWallet_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletToWalletCheckCustomerActivationResponseIntegratedCommand.ProtoReflect.Descriptor instead.
func (*WalletToWalletCheckCustomerActivationResponseIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_WalletToWallet_proto_rawDescGZIP(), []int{14}
}

func (x *WalletToWalletCheckCustomerActivationResponseIntegratedCommand) GetIsDone() bool {
	if x != nil {
		return x.IsDone
	}
	return false
}

func (x *WalletToWalletCheckCustomerActivationResponseIntegratedCommand) GetSenderCustomerId() string {
	if x != nil {
		return x.SenderCustomerId
	}
	return ""
}

func (x *WalletToWalletCheckCustomerActivationResponseIntegratedCommand) GetFailure() *common.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *WalletToWalletCheckCustomerActivationResponseIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *WalletToWalletCheckCustomerActivationResponseIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_WalletToWallet_proto protoreflect.FileDescriptor

const file_WalletToWallet_proto_rawDesc = "" +
	"\n" +
	"\x14WalletToWallet.proto\x12\x0eWalletToWallet\x1a\fCommon.proto\"\xde\x02\n" +
	":AddCustomerAccountDocumentsWalletToWalletIntegratedCommand\x12U\n" +
	"\x0eSenderMetadata\x18\x01 \x01(\v2-.WalletToWallet.CustomerAccountWalletMetadataR\x0eSenderMetadata\x12Y\n" +
	"\x10ReceiverMetadata\x18\x02 \x01(\v2-.WalletToWallet.CustomerAccountWalletMetadataR\x10ReceiverMetadata\x12$\n" +
	"\rTransactionId\x18\x03 \x01(\tR\rTransactionId\x12\x12\n" +
	"\x04Date\x18\x04 \x01(\x03R\x04Date\x12$\n" +
	"\rCorrelationId\x18\x05 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x06 \x01(\tR\x02Id\"\xbd\x01\n" +
	"BAddCustomerAccountDocumentsWalletToWalletResponseIntegratedCommand\x12\x16\n" +
	"\x06IsDone\x18\x01 \x01(\bR\x06IsDone\x12)\n" +
	"\aFailure\x18\x02 \x01(\v2\x0f.Common.FailureR\aFailure\x12$\n" +
	"\rCorrelationId\x18\x03 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x04 \x01(\tR\x02Id\"\xa4\x01\n" +
	"JCommitOrRollbackAddCustomerAccountDocumentsWalletToWalletIntegratedCommand\x12 \n" +
	"\vIsCommitted\x18\x01 \x01(\bR\vIsCommitted\x12$\n" +
	"\rCorrelationId\x18\x02 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x03 \x01(\tR\x02Id\"\xa8\x01\n" +
	"\x1dCustomerAccountWalletMetadata\x12\x1c\n" +
	"\tAccountId\x18\x01 \x01(\tR\tAccountId\x12\x1e\n" +
	"\n" +
	"CustomerId\x18\x02 \x01(\tR\n" +
	"CustomerId\x12\x1c\n" +
	"\tManagerId\x18\x03 \x01(\tR\tManagerId\x12+\n" +
	"\x05Money\x18\x04 \x01(\v2\x15.Common.MoneyDocumentR\x05Money\"\x82\x01\n" +
	"\x17ExchangerWalletMetadata\x12\x1c\n" +
	"\tAccountId\x18\x01 \x01(\tR\tAccountId\x12\x1c\n" +
	"\tManagerId\x18\x02 \x01(\tR\tManagerId\x12+\n" +
	"\x05Money\x18\x03 \x01(\v2\x15.Common.MoneyDocumentR\x05Money\"\xcc\x02\n" +
	"4AddExchangerDocumentsWalletToWalletIntegratedCommand\x12O\n" +
	"\x0eSenderMetadata\x18\x01 \x01(\v2'.WalletToWallet.ExchangerWalletMetadataR\x0eSenderMetadata\x12S\n" +
	"\x10ReceiverMetadata\x18\x02 \x01(\v2'.WalletToWallet.ExchangerWalletMetadataR\x10ReceiverMetadata\x12$\n" +
	"\rTransactionId\x18\x03 \x01(\tR\rTransactionId\x12\x12\n" +
	"\x04Date\x18\x04 \x01(\x03R\x04Date\x12$\n" +
	"\rCorrelationId\x18\x05 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x06 \x01(\tR\x02Id\"\xb7\x01\n" +
	"<AddExchangerDocumentsWalletToWalletResponseIntegratedCommand\x12\x16\n" +
	"\x06IsDone\x18\x01 \x01(\bR\x06IsDone\x12)\n" +
	"\aFailure\x18\x02 \x01(\v2\x0f.Common.FailureR\aFailure\x12$\n" +
	"\rCorrelationId\x18\x03 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x04 \x01(\tR\x02Id\"\x9e\x01\n" +
	"DCommitOrRollbackAddExchangerDocumentsWalletToWalletIntegratedCommand\x12 \n" +
	"\vIsCommitted\x18\x01 \x01(\bR\vIsCommitted\x12$\n" +
	"\rCorrelationId\x18\x02 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x03 \x01(\tR\x02Id\"t\n" +
	"\x1aCustomerActivationMetadata\x12\x1a\n" +
	"\bUserName\x18\x01 \x01(\tR\bUserName\x12\x1c\n" +
	"\tAccountId\x18\x02 \x01(\tR\tAccountId\x12\x1c\n" +
	"\tManagerId\x18\x03 \x01(\tR\tManagerId\"\xc4\x01\n" +
	"1WalletToWalletCheckTransferLimitIntegratedMessage\x12(\n" +
	"\x0fSenderManagerId\x18\x01 \x01(\tR\x0fSenderManagerId\x12/\n" +
	"\vSenderMoney\x18\x02 \x01(\v2\r.Common.MoneyR\vSenderMoney\x12$\n" +
	"\rCorrelationId\x18\x03 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x04 \x01(\tR\x02Id\"\xb4\x01\n" +
	"9WalletToWalletCheckTransferLimitResponseIntegratedMessage\x12\x16\n" +
	"\x06IsDone\x18\x01 \x01(\bR\x06IsDone\x12)\n" +
	"\aFailure\x18\x02 \x01(\v2\x0f.Common.FailureR\aFailure\x12$\n" +
	"\rCorrelationId\x18\x03 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x04 \x01(\tR\x02Id\"\xbb\x01\n" +
	"+WalletToWalletCheckManagerIntegratedCommand\x12(\n" +
	"\x0fSenderManagerId\x18\x01 \x01(\tR\x0fSenderManagerId\x12,\n" +
	"\x11ReceiverManagerId\x18\x02 \x01(\tR\x11ReceiverManagerId\x12$\n" +
	"\rCorrelationId\x18\x03 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x04 \x01(\tR\x02Id\"\xae\x01\n" +
	"3WalletToWalletCheckManagerResponseIntegratedCommand\x12\x16\n" +
	"\x06IsDone\x18\x01 \x01(\bR\x06IsDone\x12)\n" +
	"\aFailure\x18\x02 \x01(\v2\x0f.Common.FailureR\aFailure\x12$\n" +
	"\rCorrelationId\x18\x03 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x04 \x01(\tR\x02Id\"\xc6\x01\n" +
	"6WalletToWalletCheckCustomerActivationIntegratedCommand\x12\x1a\n" +
	"\bUserName\x18\x01 \x01(\tR\bUserName\x12\x1c\n" +
	"\tAccountId\x18\x02 \x01(\tR\tAccountId\x12\x1c\n" +
	"\tManagerId\x18\x03 \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\x04 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x05 \x01(\tR\x02Id\"\xe5\x01\n" +
	">WalletToWalletCheckCustomerActivationResponseIntegratedCommand\x12\x16\n" +
	"\x06IsDone\x18\x01 \x01(\bR\x06IsDone\x12*\n" +
	"\x10SenderCustomerId\x18\x02 \x01(\tR\x10SenderCustomerId\x12)\n" +
	"\aFailure\x18\x03 \x01(\v2\x0f.Common.FailureR\aFailure\x12$\n" +
	"\rCorrelationId\x18\x04 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x05 \x01(\tR\x02IdB^Z2moneyx.golang.framework/integration/WalletToWallet\xaa\x02'Ariyana.Framework.Schema.WalletToWalletb\x06proto3"

var (
	file_WalletToWallet_proto_rawDescOnce sync.Once
	file_WalletToWallet_proto_rawDescData []byte
)

func file_WalletToWallet_proto_rawDescGZIP() []byte {
	file_WalletToWallet_proto_rawDescOnce.Do(func() {
		file_WalletToWallet_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_WalletToWallet_proto_rawDesc), len(file_WalletToWallet_proto_rawDesc)))
	})
	return file_WalletToWallet_proto_rawDescData
}

var file_WalletToWallet_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_WalletToWallet_proto_goTypes = []any{
	(*AddCustomerAccountDocumentsWalletToWalletIntegratedCommand)(nil),                 // 0: WalletToWallet.AddCustomerAccountDocumentsWalletToWalletIntegratedCommand
	(*AddCustomerAccountDocumentsWalletToWalletResponseIntegratedCommand)(nil),         // 1: WalletToWallet.AddCustomerAccountDocumentsWalletToWalletResponseIntegratedCommand
	(*CommitOrRollbackAddCustomerAccountDocumentsWalletToWalletIntegratedCommand)(nil), // 2: WalletToWallet.CommitOrRollbackAddCustomerAccountDocumentsWalletToWalletIntegratedCommand
	(*CustomerAccountWalletMetadata)(nil),                                              // 3: WalletToWallet.CustomerAccountWalletMetadata
	(*ExchangerWalletMetadata)(nil),                                                    // 4: WalletToWallet.ExchangerWalletMetadata
	(*AddExchangerDocumentsWalletToWalletIntegratedCommand)(nil),                       // 5: WalletToWallet.AddExchangerDocumentsWalletToWalletIntegratedCommand
	(*AddExchangerDocumentsWalletToWalletResponseIntegratedCommand)(nil),               // 6: WalletToWallet.AddExchangerDocumentsWalletToWalletResponseIntegratedCommand
	(*CommitOrRollbackAddExchangerDocumentsWalletToWalletIntegratedCommand)(nil),       // 7: WalletToWallet.CommitOrRollbackAddExchangerDocumentsWalletToWalletIntegratedCommand
	(*CustomerActivationMetadata)(nil),                                                 // 8: WalletToWallet.CustomerActivationMetadata
	(*WalletToWalletCheckTransferLimitIntegratedMessage)(nil),                          // 9: WalletToWallet.WalletToWalletCheckTransferLimitIntegratedMessage
	(*WalletToWalletCheckTransferLimitResponseIntegratedMessage)(nil),                  // 10: WalletToWallet.WalletToWalletCheckTransferLimitResponseIntegratedMessage
	(*WalletToWalletCheckManagerIntegratedCommand)(nil),                                // 11: WalletToWallet.WalletToWalletCheckManagerIntegratedCommand
	(*WalletToWalletCheckManagerResponseIntegratedCommand)(nil),                        // 12: WalletToWallet.WalletToWalletCheckManagerResponseIntegratedCommand
	(*WalletToWalletCheckCustomerActivationIntegratedCommand)(nil),                     // 13: WalletToWallet.WalletToWalletCheckCustomerActivationIntegratedCommand
	(*WalletToWalletCheckCustomerActivationResponseIntegratedCommand)(nil),             // 14: WalletToWallet.WalletToWalletCheckCustomerActivationResponseIntegratedCommand
	(*common.Failure)(nil),       // 15: Common.Failure
	(*common.MoneyDocument)(nil), // 16: Common.MoneyDocument
	(*common.Money)(nil),         // 17: Common.Money
}
var file_WalletToWallet_proto_depIdxs = []int32{
	3,  // 0: WalletToWallet.AddCustomerAccountDocumentsWalletToWalletIntegratedCommand.SenderMetadata:type_name -> WalletToWallet.CustomerAccountWalletMetadata
	3,  // 1: WalletToWallet.AddCustomerAccountDocumentsWalletToWalletIntegratedCommand.ReceiverMetadata:type_name -> WalletToWallet.CustomerAccountWalletMetadata
	15, // 2: WalletToWallet.AddCustomerAccountDocumentsWalletToWalletResponseIntegratedCommand.Failure:type_name -> Common.Failure
	16, // 3: WalletToWallet.CustomerAccountWalletMetadata.Money:type_name -> Common.MoneyDocument
	16, // 4: WalletToWallet.ExchangerWalletMetadata.Money:type_name -> Common.MoneyDocument
	4,  // 5: WalletToWallet.AddExchangerDocumentsWalletToWalletIntegratedCommand.SenderMetadata:type_name -> WalletToWallet.ExchangerWalletMetadata
	4,  // 6: WalletToWallet.AddExchangerDocumentsWalletToWalletIntegratedCommand.ReceiverMetadata:type_name -> WalletToWallet.ExchangerWalletMetadata
	15, // 7: WalletToWallet.AddExchangerDocumentsWalletToWalletResponseIntegratedCommand.Failure:type_name -> Common.Failure
	17, // 8: WalletToWallet.WalletToWalletCheckTransferLimitIntegratedMessage.SenderMoney:type_name -> Common.Money
	15, // 9: WalletToWallet.WalletToWalletCheckTransferLimitResponseIntegratedMessage.Failure:type_name -> Common.Failure
	15, // 10: WalletToWallet.WalletToWalletCheckManagerResponseIntegratedCommand.Failure:type_name -> Common.Failure
	15, // 11: WalletToWallet.WalletToWalletCheckCustomerActivationResponseIntegratedCommand.Failure:type_name -> Common.Failure
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_WalletToWallet_proto_init() }
func file_WalletToWallet_proto_init() {
	if File_WalletToWallet_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_WalletToWallet_proto_rawDesc), len(file_WalletToWallet_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_WalletToWallet_proto_goTypes,
		DependencyIndexes: file_WalletToWallet_proto_depIdxs,
		MessageInfos:      file_WalletToWallet_proto_msgTypes,
	}.Build()
	File_WalletToWallet_proto = out.File
	file_WalletToWallet_proto_goTypes = nil
	file_WalletToWallet_proto_depIdxs = nil
}
