// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.2
// source: BlockMaknakBySupport.proto

package BlockMaknakBySupport

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	common "moneyx.golang.framework/integration/common"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BlockMaknakBySupportIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserName      string                 `protobuf:"bytes,1,opt,name=UserName,proto3" json:"UserName,omitempty"`
	CorrelationId string                 `protobuf:"bytes,2,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,3,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockMaknakBySupportIntegratedCommand) Reset() {
	*x = BlockMaknakBySupportIntegratedCommand{}
	mi := &file_BlockMaknakBySupport_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockMaknakBySupportIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockMaknakBySupportIntegratedCommand) ProtoMessage() {}

func (x *BlockMaknakBySupportIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_BlockMaknakBySupport_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockMaknakBySupportIntegratedCommand.ProtoReflect.Descriptor instead.
func (*BlockMaknakBySupportIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_BlockMaknakBySupport_proto_rawDescGZIP(), []int{0}
}

func (x *BlockMaknakBySupportIntegratedCommand) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *BlockMaknakBySupportIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *BlockMaknakBySupportIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type BlockMaknakBySupportResponseIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsDone        bool                   `protobuf:"varint,1,opt,name=IsDone,proto3" json:"IsDone,omitempty"`
	Failure       *common.Failure        `protobuf:"bytes,2,opt,name=Failure,proto3" json:"Failure,omitempty"`
	CorrelationId string                 `protobuf:"bytes,3,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,4,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockMaknakBySupportResponseIntegratedCommand) Reset() {
	*x = BlockMaknakBySupportResponseIntegratedCommand{}
	mi := &file_BlockMaknakBySupport_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockMaknakBySupportResponseIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockMaknakBySupportResponseIntegratedCommand) ProtoMessage() {}

func (x *BlockMaknakBySupportResponseIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_BlockMaknakBySupport_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockMaknakBySupportResponseIntegratedCommand.ProtoReflect.Descriptor instead.
func (*BlockMaknakBySupportResponseIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_BlockMaknakBySupport_proto_rawDescGZIP(), []int{1}
}

func (x *BlockMaknakBySupportResponseIntegratedCommand) GetIsDone() bool {
	if x != nil {
		return x.IsDone
	}
	return false
}

func (x *BlockMaknakBySupportResponseIntegratedCommand) GetFailure() *common.Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *BlockMaknakBySupportResponseIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *BlockMaknakBySupportResponseIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CommitOrRollbackBlockMaknakBySupportIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsDone        bool                   `protobuf:"varint,1,opt,name=IsDone,proto3" json:"IsDone,omitempty"`
	CorrelationId string                 `protobuf:"bytes,2,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,3,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitOrRollbackBlockMaknakBySupportIntegratedCommand) Reset() {
	*x = CommitOrRollbackBlockMaknakBySupportIntegratedCommand{}
	mi := &file_BlockMaknakBySupport_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitOrRollbackBlockMaknakBySupportIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitOrRollbackBlockMaknakBySupportIntegratedCommand) ProtoMessage() {}

func (x *CommitOrRollbackBlockMaknakBySupportIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_BlockMaknakBySupport_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitOrRollbackBlockMaknakBySupportIntegratedCommand.ProtoReflect.Descriptor instead.
func (*CommitOrRollbackBlockMaknakBySupportIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_BlockMaknakBySupport_proto_rawDescGZIP(), []int{2}
}

func (x *CommitOrRollbackBlockMaknakBySupportIntegratedCommand) GetIsDone() bool {
	if x != nil {
		return x.IsDone
	}
	return false
}

func (x *CommitOrRollbackBlockMaknakBySupportIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *CommitOrRollbackBlockMaknakBySupportIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_BlockMaknakBySupport_proto protoreflect.FileDescriptor

const file_BlockMaknakBySupport_proto_rawDesc = "" +
	"\n" +
	"\x1aBlockMaknakBySupport.proto\x12\x14BlockMaknakBySupport\x1a\fCommon.proto\"y\n" +
	"%BlockMaknakBySupportIntegratedCommand\x12\x1a\n" +
	"\bUserName\x18\x01 \x01(\tR\bUserName\x12$\n" +
	"\rCorrelationId\x18\x02 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x03 \x01(\tR\x02Id\"\xa8\x01\n" +
	"-BlockMaknakBySupportResponseIntegratedCommand\x12\x16\n" +
	"\x06IsDone\x18\x01 \x01(\bR\x06IsDone\x12)\n" +
	"\aFailure\x18\x02 \x01(\v2\x0f.Common.FailureR\aFailure\x12$\n" +
	"\rCorrelationId\x18\x03 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x04 \x01(\tR\x02Id\"\x85\x01\n" +
	"5CommitOrRollbackBlockMaknakBySupportIntegratedCommand\x12\x16\n" +
	"\x06IsDone\x18\x01 \x01(\bR\x06IsDone\x12$\n" +
	"\rCorrelationId\x18\x02 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x03 \x01(\tR\x02IdBjZ8moneyx.golang.framework/integration/BlockMaknakBySupport\xaa\x02-Ariyana.Framework.Schema.BlockMaknakBySupportb\x06proto3"

var (
	file_BlockMaknakBySupport_proto_rawDescOnce sync.Once
	file_BlockMaknakBySupport_proto_rawDescData []byte
)

func file_BlockMaknakBySupport_proto_rawDescGZIP() []byte {
	file_BlockMaknakBySupport_proto_rawDescOnce.Do(func() {
		file_BlockMaknakBySupport_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_BlockMaknakBySupport_proto_rawDesc), len(file_BlockMaknakBySupport_proto_rawDesc)))
	})
	return file_BlockMaknakBySupport_proto_rawDescData
}

var file_BlockMaknakBySupport_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_BlockMaknakBySupport_proto_goTypes = []any{
	(*BlockMaknakBySupportIntegratedCommand)(nil),                 // 0: BlockMaknakBySupport.BlockMaknakBySupportIntegratedCommand
	(*BlockMaknakBySupportResponseIntegratedCommand)(nil),         // 1: BlockMaknakBySupport.BlockMaknakBySupportResponseIntegratedCommand
	(*CommitOrRollbackBlockMaknakBySupportIntegratedCommand)(nil), // 2: BlockMaknakBySupport.CommitOrRollbackBlockMaknakBySupportIntegratedCommand
	(*common.Failure)(nil),                                        // 3: Common.Failure
}
var file_BlockMaknakBySupport_proto_depIdxs = []int32{
	3, // 0: BlockMaknakBySupport.BlockMaknakBySupportResponseIntegratedCommand.Failure:type_name -> Common.Failure
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_BlockMaknakBySupport_proto_init() }
func file_BlockMaknakBySupport_proto_init() {
	if File_BlockMaknakBySupport_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_BlockMaknakBySupport_proto_rawDesc), len(file_BlockMaknakBySupport_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_BlockMaknakBySupport_proto_goTypes,
		DependencyIndexes: file_BlockMaknakBySupport_proto_depIdxs,
		MessageInfos:      file_BlockMaknakBySupport_proto_msgTypes,
	}.Build()
	File_BlockMaknakBySupport_proto = out.File
	file_BlockMaknakBySupport_proto_goTypes = nil
	file_BlockMaknakBySupport_proto_depIdxs = nil
}
