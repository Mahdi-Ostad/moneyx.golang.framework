// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.2
// source: ActionLog.proto

package ActionLog

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	common "moneyx.golang.framework/integration/common"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChequeStatusEnum int32

const (
	ChequeStatusEnum_SavedToCustomerAccount       ChequeStatusEnum = 0
	ChequeStatusEnum_SavedToCashDeskOrBankAccount ChequeStatusEnum = 1
	ChequeStatusEnum_HasReturned                  ChequeStatusEnum = 2
	ChequeStatusEnum_CashedToMoney                ChequeStatusEnum = 3
)

// Enum value maps for ChequeStatusEnum.
var (
	ChequeStatusEnum_name = map[int32]string{
		0: "SavedToCustomerAccount",
		1: "SavedToCashDeskOrBankAccount",
		2: "HasReturned",
		3: "CashedToMoney",
	}
	ChequeStatusEnum_value = map[string]int32{
		"SavedToCustomerAccount":       0,
		"SavedToCashDeskOrBankAccount": 1,
		"HasReturned":                  2,
		"CashedToMoney":                3,
	}
)

func (x ChequeStatusEnum) Enum() *ChequeStatusEnum {
	p := new(ChequeStatusEnum)
	*p = x
	return p
}

func (x ChequeStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChequeStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_ActionLog_proto_enumTypes[0].Descriptor()
}

func (ChequeStatusEnum) Type() protoreflect.EnumType {
	return &file_ActionLog_proto_enumTypes[0]
}

func (x ChequeStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChequeStatusEnum.Descriptor instead.
func (ChequeStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{0}
}

type DraftType int32

const (
	DraftType_Draft    DraftType = 0
	DraftType_Executed DraftType = 1
)

// Enum value maps for DraftType.
var (
	DraftType_name = map[int32]string{
		0: "Draft",
		1: "Executed",
	}
	DraftType_value = map[string]int32{
		"Draft":    0,
		"Executed": 1,
	}
)

func (x DraftType) Enum() *DraftType {
	p := new(DraftType)
	*p = x
	return p
}

func (x DraftType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DraftType) Descriptor() protoreflect.EnumDescriptor {
	return file_ActionLog_proto_enumTypes[1].Descriptor()
}

func (DraftType) Type() protoreflect.EnumType {
	return &file_ActionLog_proto_enumTypes[1]
}

func (x DraftType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DraftType.Descriptor instead.
func (DraftType) EnumDescriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{1}
}

type LogType int32

const (
	LogType_Create LogType = 0
	LogType_Update LogType = 1
	LogType_Delete LogType = 2
)

// Enum value maps for LogType.
var (
	LogType_name = map[int32]string{
		0: "Create",
		1: "Update",
		2: "Delete",
	}
	LogType_value = map[string]int32{
		"Create": 0,
		"Update": 1,
		"Delete": 2,
	}
)

func (x LogType) Enum() *LogType {
	p := new(LogType)
	*p = x
	return p
}

func (x LogType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogType) Descriptor() protoreflect.EnumDescriptor {
	return file_ActionLog_proto_enumTypes[2].Descriptor()
}

func (LogType) Type() protoreflect.EnumType {
	return &file_ActionLog_proto_enumTypes[2]
}

func (x LogType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogType.Descriptor instead.
func (LogType) EnumDescriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{2}
}

type AccountActionLogIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrackingId    string                 `protobuf:"bytes,1,opt,name=TrackingId,proto3" json:"TrackingId,omitempty"`
	AccountName   *LogMetadata           `protobuf:"bytes,2,opt,name=AccountName,proto3" json:"AccountName,omitempty"`
	LogType       string                 `protobuf:"bytes,3,opt,name=LogType,proto3" json:"LogType,omitempty"`
	UserSubjectId string                 `protobuf:"bytes,4,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	ManagerId     string                 `protobuf:"bytes,5,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId string                 `protobuf:"bytes,6,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,7,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountActionLogIntegratedCommand) Reset() {
	*x = AccountActionLogIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountActionLogIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountActionLogIntegratedCommand) ProtoMessage() {}

func (x *AccountActionLogIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountActionLogIntegratedCommand.ProtoReflect.Descriptor instead.
func (*AccountActionLogIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{0}
}

func (x *AccountActionLogIntegratedCommand) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *AccountActionLogIntegratedCommand) GetAccountName() *LogMetadata {
	if x != nil {
		return x.AccountName
	}
	return nil
}

func (x *AccountActionLogIntegratedCommand) GetLogType() string {
	if x != nil {
		return x.LogType
	}
	return ""
}

func (x *AccountActionLogIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *AccountActionLogIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *AccountActionLogIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *AccountActionLogIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type BankActionLogIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrackingId    string                 `protobuf:"bytes,1,opt,name=TrackingId,proto3" json:"TrackingId,omitempty"`
	BankName      *LogMetadata           `protobuf:"bytes,2,opt,name=BankName,proto3" json:"BankName,omitempty"`
	Currency      *LogMetadata           `protobuf:"bytes,3,opt,name=Currency,proto3" json:"Currency,omitempty"`
	CardNumber    *LogMetadata           `protobuf:"bytes,4,opt,name=CardNumber,proto3" json:"CardNumber,omitempty"`
	LogType       string                 `protobuf:"bytes,5,opt,name=LogType,proto3" json:"LogType,omitempty"`
	UserSubjectId string                 `protobuf:"bytes,6,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	ManagerId     string                 `protobuf:"bytes,7,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId string                 `protobuf:"bytes,8,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,9,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BankActionLogIntegratedCommand) Reset() {
	*x = BankActionLogIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BankActionLogIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankActionLogIntegratedCommand) ProtoMessage() {}

func (x *BankActionLogIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankActionLogIntegratedCommand.ProtoReflect.Descriptor instead.
func (*BankActionLogIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{1}
}

func (x *BankActionLogIntegratedCommand) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *BankActionLogIntegratedCommand) GetBankName() *LogMetadata {
	if x != nil {
		return x.BankName
	}
	return nil
}

func (x *BankActionLogIntegratedCommand) GetCurrency() *LogMetadata {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *BankActionLogIntegratedCommand) GetCardNumber() *LogMetadata {
	if x != nil {
		return x.CardNumber
	}
	return nil
}

func (x *BankActionLogIntegratedCommand) GetLogType() string {
	if x != nil {
		return x.LogType
	}
	return ""
}

func (x *BankActionLogIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *BankActionLogIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *BankActionLogIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *BankActionLogIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ChangeBankTransactionLogIntegratedCommand struct {
	state           protoimpl.MessageState   `protogen:"open.v1"`
	TrackingId      string                   `protobuf:"bytes,1,opt,name=TrackingId,proto3" json:"TrackingId,omitempty"`
	OpponentInfoes  []*common.AccountingInfo `protobuf:"bytes,2,rep,name=OpponentInfoes,proto3" json:"OpponentInfoes,omitempty"`
	BankAccountName *LogMetadata             `protobuf:"bytes,3,opt,name=BankAccountName,proto3" json:"BankAccountName,omitempty"`
	Description     *LogMetadata             `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	IsInterBank     bool                     `protobuf:"varint,5,opt,name=IsInterBank,proto3" json:"IsInterBank,omitempty"`
	LogType         LogType                  `protobuf:"varint,6,opt,name=LogType,proto3,enum=ActionLog.LogType" json:"LogType,omitempty"`
	UserSubjectId   string                   `protobuf:"bytes,7,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	TrackingNumber  string                   `protobuf:"bytes,8,opt,name=TrackingNumber,proto3" json:"TrackingNumber,omitempty"`
	IsWithdraw      *common.NullableBool     `protobuf:"bytes,9,opt,name=IsWithdraw,proto3" json:"IsWithdraw,omitempty"`
	IsPrivate       bool                     `protobuf:"varint,10,opt,name=IsPrivate,proto3" json:"IsPrivate,omitempty"`
	ManagerId       string                   `protobuf:"bytes,11,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId   string                   `protobuf:"bytes,12,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id              string                   `protobuf:"bytes,13,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ChangeBankTransactionLogIntegratedCommand) Reset() {
	*x = ChangeBankTransactionLogIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeBankTransactionLogIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeBankTransactionLogIntegratedCommand) ProtoMessage() {}

func (x *ChangeBankTransactionLogIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeBankTransactionLogIntegratedCommand.ProtoReflect.Descriptor instead.
func (*ChangeBankTransactionLogIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{2}
}

func (x *ChangeBankTransactionLogIntegratedCommand) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *ChangeBankTransactionLogIntegratedCommand) GetOpponentInfoes() []*common.AccountingInfo {
	if x != nil {
		return x.OpponentInfoes
	}
	return nil
}

func (x *ChangeBankTransactionLogIntegratedCommand) GetBankAccountName() *LogMetadata {
	if x != nil {
		return x.BankAccountName
	}
	return nil
}

func (x *ChangeBankTransactionLogIntegratedCommand) GetDescription() *LogMetadata {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ChangeBankTransactionLogIntegratedCommand) GetIsInterBank() bool {
	if x != nil {
		return x.IsInterBank
	}
	return false
}

func (x *ChangeBankTransactionLogIntegratedCommand) GetLogType() LogType {
	if x != nil {
		return x.LogType
	}
	return LogType_Create
}

func (x *ChangeBankTransactionLogIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *ChangeBankTransactionLogIntegratedCommand) GetTrackingNumber() string {
	if x != nil {
		return x.TrackingNumber
	}
	return ""
}

func (x *ChangeBankTransactionLogIntegratedCommand) GetIsWithdraw() *common.NullableBool {
	if x != nil {
		return x.IsWithdraw
	}
	return nil
}

func (x *ChangeBankTransactionLogIntegratedCommand) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *ChangeBankTransactionLogIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *ChangeBankTransactionLogIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *ChangeBankTransactionLogIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type BranchActionLogIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrackingId    string                 `protobuf:"bytes,1,opt,name=TrackingId,proto3" json:"TrackingId,omitempty"`
	BranchName    *LogMetadata           `protobuf:"bytes,2,opt,name=BranchName,proto3" json:"BranchName,omitempty"`
	Currency      *LogMetadata           `protobuf:"bytes,3,opt,name=Currency,proto3" json:"Currency,omitempty"`
	CustomerName  *LogMetadata           `protobuf:"bytes,4,opt,name=CustomerName,proto3" json:"CustomerName,omitempty"`
	LogType       LogType                `protobuf:"varint,5,opt,name=LogType,proto3,enum=ActionLog.LogType" json:"LogType,omitempty"`
	UserSubjectId string                 `protobuf:"bytes,6,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	ManagerId     string                 `protobuf:"bytes,7,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId string                 `protobuf:"bytes,8,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,9,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BranchActionLogIntegratedCommand) Reset() {
	*x = BranchActionLogIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BranchActionLogIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchActionLogIntegratedCommand) ProtoMessage() {}

func (x *BranchActionLogIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchActionLogIntegratedCommand.ProtoReflect.Descriptor instead.
func (*BranchActionLogIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{3}
}

func (x *BranchActionLogIntegratedCommand) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *BranchActionLogIntegratedCommand) GetBranchName() *LogMetadata {
	if x != nil {
		return x.BranchName
	}
	return nil
}

func (x *BranchActionLogIntegratedCommand) GetCurrency() *LogMetadata {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *BranchActionLogIntegratedCommand) GetCustomerName() *LogMetadata {
	if x != nil {
		return x.CustomerName
	}
	return nil
}

func (x *BranchActionLogIntegratedCommand) GetLogType() LogType {
	if x != nil {
		return x.LogType
	}
	return LogType_Create
}

func (x *BranchActionLogIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *BranchActionLogIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *BranchActionLogIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *BranchActionLogIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type BuySellCurrencyLogIntegratedCommand struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TrackingId       string                 `protobuf:"bytes,1,opt,name=TrackingId,proto3" json:"TrackingId,omitempty"`
	IsBuy            bool                   `protobuf:"varint,2,opt,name=IsBuy,proto3" json:"IsBuy,omitempty"`
	BuyerMoney       *common.Money          `protobuf:"bytes,3,opt,name=BuyerMoney,proto3" json:"BuyerMoney,omitempty"`
	BuyerCommission  *common.MoneyDocument  `protobuf:"bytes,4,opt,name=BuyerCommission,proto3" json:"BuyerCommission,omitempty"`
	BuyerFullName    *LogMetadata           `protobuf:"bytes,5,opt,name=BuyerFullName,proto3" json:"BuyerFullName,omitempty"`
	SellerFullName   *LogMetadata           `protobuf:"bytes,6,opt,name=SellerFullName,proto3" json:"SellerFullName,omitempty"`
	SellerMoney      *common.Money          `protobuf:"bytes,7,opt,name=SellerMoney,proto3" json:"SellerMoney,omitempty"`
	SellerCommission *common.MoneyDocument  `protobuf:"bytes,8,opt,name=SellerCommission,proto3" json:"SellerCommission,omitempty"`
	Rate             *LogMetadata           `protobuf:"bytes,9,opt,name=Rate,proto3" json:"Rate,omitempty"`
	LogType          LogType                `protobuf:"varint,10,opt,name=LogType,proto3,enum=ActionLog.LogType" json:"LogType,omitempty"`
	UserSubjectId    string                 `protobuf:"bytes,11,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	IsPrivate        bool                   `protobuf:"varint,12,opt,name=IsPrivate,proto3" json:"IsPrivate,omitempty"`
	Description      string                 `protobuf:"bytes,13,opt,name=Description,proto3" json:"Description,omitempty"`
	ManangerId       string                 `protobuf:"bytes,14,opt,name=ManangerId,proto3" json:"ManangerId,omitempty"`
	CorrelationId    string                 `protobuf:"bytes,15,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id               string                 `protobuf:"bytes,16,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *BuySellCurrencyLogIntegratedCommand) Reset() {
	*x = BuySellCurrencyLogIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuySellCurrencyLogIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuySellCurrencyLogIntegratedCommand) ProtoMessage() {}

func (x *BuySellCurrencyLogIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuySellCurrencyLogIntegratedCommand.ProtoReflect.Descriptor instead.
func (*BuySellCurrencyLogIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{4}
}

func (x *BuySellCurrencyLogIntegratedCommand) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *BuySellCurrencyLogIntegratedCommand) GetIsBuy() bool {
	if x != nil {
		return x.IsBuy
	}
	return false
}

func (x *BuySellCurrencyLogIntegratedCommand) GetBuyerMoney() *common.Money {
	if x != nil {
		return x.BuyerMoney
	}
	return nil
}

func (x *BuySellCurrencyLogIntegratedCommand) GetBuyerCommission() *common.MoneyDocument {
	if x != nil {
		return x.BuyerCommission
	}
	return nil
}

func (x *BuySellCurrencyLogIntegratedCommand) GetBuyerFullName() *LogMetadata {
	if x != nil {
		return x.BuyerFullName
	}
	return nil
}

func (x *BuySellCurrencyLogIntegratedCommand) GetSellerFullName() *LogMetadata {
	if x != nil {
		return x.SellerFullName
	}
	return nil
}

func (x *BuySellCurrencyLogIntegratedCommand) GetSellerMoney() *common.Money {
	if x != nil {
		return x.SellerMoney
	}
	return nil
}

func (x *BuySellCurrencyLogIntegratedCommand) GetSellerCommission() *common.MoneyDocument {
	if x != nil {
		return x.SellerCommission
	}
	return nil
}

func (x *BuySellCurrencyLogIntegratedCommand) GetRate() *LogMetadata {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *BuySellCurrencyLogIntegratedCommand) GetLogType() LogType {
	if x != nil {
		return x.LogType
	}
	return LogType_Create
}

func (x *BuySellCurrencyLogIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *BuySellCurrencyLogIntegratedCommand) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *BuySellCurrencyLogIntegratedCommand) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BuySellCurrencyLogIntegratedCommand) GetManangerId() string {
	if x != nil {
		return x.ManangerId
	}
	return ""
}

func (x *BuySellCurrencyLogIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *BuySellCurrencyLogIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CashTransactionLogIntegratedCommand struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	TrackingId              string                 `protobuf:"bytes,1,opt,name=TrackingId,proto3" json:"TrackingId,omitempty"`
	OppositeAccountFullName *LogMetadata           `protobuf:"bytes,2,opt,name=OppositeAccountFullName,proto3" json:"OppositeAccountFullName,omitempty"`
	Description             *LogMetadata           `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	LogType                 LogType                `protobuf:"varint,4,opt,name=LogType,proto3,enum=ActionLog.LogType" json:"LogType,omitempty"`
	UserSubjectId           string                 `protobuf:"bytes,5,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	IsReceived              bool                   `protobuf:"varint,6,opt,name=IsReceived,proto3" json:"IsReceived,omitempty"`
	Money                   *common.Money          `protobuf:"bytes,7,opt,name=Money,proto3" json:"Money,omitempty"`
	CommissionMoney         *common.Money          `protobuf:"bytes,8,opt,name=CommissionMoney,proto3" json:"CommissionMoney,omitempty"`
	ManagerId               string                 `protobuf:"bytes,9,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId           string                 `protobuf:"bytes,10,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id                      string                 `protobuf:"bytes,11,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CashTransactionLogIntegratedCommand) Reset() {
	*x = CashTransactionLogIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CashTransactionLogIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CashTransactionLogIntegratedCommand) ProtoMessage() {}

func (x *CashTransactionLogIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CashTransactionLogIntegratedCommand.ProtoReflect.Descriptor instead.
func (*CashTransactionLogIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{5}
}

func (x *CashTransactionLogIntegratedCommand) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *CashTransactionLogIntegratedCommand) GetOppositeAccountFullName() *LogMetadata {
	if x != nil {
		return x.OppositeAccountFullName
	}
	return nil
}

func (x *CashTransactionLogIntegratedCommand) GetDescription() *LogMetadata {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *CashTransactionLogIntegratedCommand) GetLogType() LogType {
	if x != nil {
		return x.LogType
	}
	return LogType_Create
}

func (x *CashTransactionLogIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *CashTransactionLogIntegratedCommand) GetIsReceived() bool {
	if x != nil {
		return x.IsReceived
	}
	return false
}

func (x *CashTransactionLogIntegratedCommand) GetMoney() *common.Money {
	if x != nil {
		return x.Money
	}
	return nil
}

func (x *CashTransactionLogIntegratedCommand) GetCommissionMoney() *common.Money {
	if x != nil {
		return x.CommissionMoney
	}
	return nil
}

func (x *CashTransactionLogIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *CashTransactionLogIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *CashTransactionLogIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ChangeDraftLogIntegratedCommand struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	TrackingId         string                 `protobuf:"bytes,1,opt,name=TrackingId,proto3" json:"TrackingId,omitempty"`
	DraftOrderNumber   *LogMetadata           `protobuf:"bytes,2,opt,name=DraftOrderNumber,proto3" json:"DraftOrderNumber,omitempty"`
	Branch             *LogMetadata           `protobuf:"bytes,3,opt,name=Branch,proto3" json:"Branch,omitempty"`
	Amount             *LogMetadata           `protobuf:"bytes,4,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Currency           *LogMetadata           `protobuf:"bytes,5,opt,name=Currency,proto3" json:"Currency,omitempty"`
	OldRate            *LogMetadata           `protobuf:"bytes,6,opt,name=OldRate,proto3" json:"OldRate,omitempty"`
	NewRate            *LogMetadata           `protobuf:"bytes,7,opt,name=NewRate,proto3" json:"NewRate,omitempty"`
	RateCurrency       *LogMetadata           `protobuf:"bytes,8,opt,name=RateCurrency,proto3" json:"RateCurrency,omitempty"`
	CommissionAmount   *LogMetadata           `protobuf:"bytes,9,opt,name=CommissionAmount,proto3" json:"CommissionAmount,omitempty"`
	CommissionCurrency *LogMetadata           `protobuf:"bytes,10,opt,name=CommissionCurrency,proto3" json:"CommissionCurrency,omitempty"`
	LogType            LogType                `protobuf:"varint,11,opt,name=LogType,proto3,enum=ActionLog.LogType" json:"LogType,omitempty"`
	UserSubjectId      string                 `protobuf:"bytes,12,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	IsPrivate          bool                   `protobuf:"varint,13,opt,name=IsPrivate,proto3" json:"IsPrivate,omitempty"`
	ManangerId         string                 `protobuf:"bytes,14,opt,name=ManangerId,proto3" json:"ManangerId,omitempty"`
	CorrelationId      string                 `protobuf:"bytes,15,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id                 string                 `protobuf:"bytes,16,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ChangeDraftLogIntegratedCommand) Reset() {
	*x = ChangeDraftLogIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeDraftLogIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeDraftLogIntegratedCommand) ProtoMessage() {}

func (x *ChangeDraftLogIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeDraftLogIntegratedCommand.ProtoReflect.Descriptor instead.
func (*ChangeDraftLogIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{6}
}

func (x *ChangeDraftLogIntegratedCommand) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *ChangeDraftLogIntegratedCommand) GetDraftOrderNumber() *LogMetadata {
	if x != nil {
		return x.DraftOrderNumber
	}
	return nil
}

func (x *ChangeDraftLogIntegratedCommand) GetBranch() *LogMetadata {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *ChangeDraftLogIntegratedCommand) GetAmount() *LogMetadata {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ChangeDraftLogIntegratedCommand) GetCurrency() *LogMetadata {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *ChangeDraftLogIntegratedCommand) GetOldRate() *LogMetadata {
	if x != nil {
		return x.OldRate
	}
	return nil
}

func (x *ChangeDraftLogIntegratedCommand) GetNewRate() *LogMetadata {
	if x != nil {
		return x.NewRate
	}
	return nil
}

func (x *ChangeDraftLogIntegratedCommand) GetRateCurrency() *LogMetadata {
	if x != nil {
		return x.RateCurrency
	}
	return nil
}

func (x *ChangeDraftLogIntegratedCommand) GetCommissionAmount() *LogMetadata {
	if x != nil {
		return x.CommissionAmount
	}
	return nil
}

func (x *ChangeDraftLogIntegratedCommand) GetCommissionCurrency() *LogMetadata {
	if x != nil {
		return x.CommissionCurrency
	}
	return nil
}

func (x *ChangeDraftLogIntegratedCommand) GetLogType() LogType {
	if x != nil {
		return x.LogType
	}
	return LogType_Create
}

func (x *ChangeDraftLogIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *ChangeDraftLogIntegratedCommand) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *ChangeDraftLogIntegratedCommand) GetManangerId() string {
	if x != nil {
		return x.ManangerId
	}
	return ""
}

func (x *ChangeDraftLogIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *ChangeDraftLogIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ChangeRateDraftActionLogIntegratedCommand struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TrackingId      string                 `protobuf:"bytes,1,opt,name=TrackingId,proto3" json:"TrackingId,omitempty"`
	DraftNumber     string                 `protobuf:"bytes,2,opt,name=DraftNumber,proto3" json:"DraftNumber,omitempty"`
	IsOutgoing      bool                   `protobuf:"varint,3,opt,name=IsOutgoing,proto3" json:"IsOutgoing,omitempty"`
	Branch          *LogMetadata           `protobuf:"bytes,4,opt,name=Branch,proto3" json:"Branch,omitempty"`
	OldRate         string                 `protobuf:"bytes,5,opt,name=OldRate,proto3" json:"OldRate,omitempty"`
	NewRate         string                 `protobuf:"bytes,6,opt,name=NewRate,proto3" json:"NewRate,omitempty"`
	DraftMoney      *common.Money          `protobuf:"bytes,7,opt,name=DraftMoney,proto3" json:"DraftMoney,omitempty"`
	EquivalentMoney *common.Money          `protobuf:"bytes,8,opt,name=EquivalentMoney,proto3" json:"EquivalentMoney,omitempty"`
	DraftCommission *common.MoneyDocument  `protobuf:"bytes,9,opt,name=DraftCommission,proto3" json:"DraftCommission,omitempty"`
	UserSubjectId   string                 `protobuf:"bytes,10,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	ManagerId       string                 `protobuf:"bytes,11,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId   string                 `protobuf:"bytes,12,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id              string                 `protobuf:"bytes,13,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ChangeRateDraftActionLogIntegratedCommand) Reset() {
	*x = ChangeRateDraftActionLogIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeRateDraftActionLogIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeRateDraftActionLogIntegratedCommand) ProtoMessage() {}

func (x *ChangeRateDraftActionLogIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeRateDraftActionLogIntegratedCommand.ProtoReflect.Descriptor instead.
func (*ChangeRateDraftActionLogIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{7}
}

func (x *ChangeRateDraftActionLogIntegratedCommand) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *ChangeRateDraftActionLogIntegratedCommand) GetDraftNumber() string {
	if x != nil {
		return x.DraftNumber
	}
	return ""
}

func (x *ChangeRateDraftActionLogIntegratedCommand) GetIsOutgoing() bool {
	if x != nil {
		return x.IsOutgoing
	}
	return false
}

func (x *ChangeRateDraftActionLogIntegratedCommand) GetBranch() *LogMetadata {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *ChangeRateDraftActionLogIntegratedCommand) GetOldRate() string {
	if x != nil {
		return x.OldRate
	}
	return ""
}

func (x *ChangeRateDraftActionLogIntegratedCommand) GetNewRate() string {
	if x != nil {
		return x.NewRate
	}
	return ""
}

func (x *ChangeRateDraftActionLogIntegratedCommand) GetDraftMoney() *common.Money {
	if x != nil {
		return x.DraftMoney
	}
	return nil
}

func (x *ChangeRateDraftActionLogIntegratedCommand) GetEquivalentMoney() *common.Money {
	if x != nil {
		return x.EquivalentMoney
	}
	return nil
}

func (x *ChangeRateDraftActionLogIntegratedCommand) GetDraftCommission() *common.MoneyDocument {
	if x != nil {
		return x.DraftCommission
	}
	return nil
}

func (x *ChangeRateDraftActionLogIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *ChangeRateDraftActionLogIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *ChangeRateDraftActionLogIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *ChangeRateDraftActionLogIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ChequeTransactionIntegratedCommand struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	TrackingId         string                 `protobuf:"bytes,1,opt,name=TrackingId,proto3" json:"TrackingId,omitempty"`
	BankName           *LogMetadata           `protobuf:"bytes,2,opt,name=BankName,proto3" json:"BankName,omitempty"`
	DocumentNumber     *LogMetadata           `protobuf:"bytes,3,opt,name=DocumentNumber,proto3" json:"DocumentNumber,omitempty"`
	Amount             *LogMetadata           `protobuf:"bytes,4,opt,name=Amount,proto3" json:"Amount,omitempty"`
	CurrencyCode       *LogMetadata           `protobuf:"bytes,5,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
	DocDate            *LogMetadata           `protobuf:"bytes,6,opt,name=DocDate,proto3" json:"DocDate,omitempty"`
	AccountTitle       *LogMetadata           `protobuf:"bytes,7,opt,name=AccountTitle,proto3" json:"AccountTitle,omitempty"`
	Opposite           *LogMetadata           `protobuf:"bytes,8,opt,name=Opposite,proto3" json:"Opposite,omitempty"`
	Description        *LogMetadata           `protobuf:"bytes,9,opt,name=Description,proto3" json:"Description,omitempty"`
	ChequeStatus       ChequeStatusEnum       `protobuf:"varint,10,opt,name=ChequeStatus,proto3,enum=ActionLog.ChequeStatusEnum" json:"ChequeStatus,omitempty"`
	IsPayment          bool                   `protobuf:"varint,11,opt,name=IsPayment,proto3" json:"IsPayment,omitempty"`
	LogType            LogType                `protobuf:"varint,12,opt,name=LogType,proto3,enum=ActionLog.LogType" json:"LogType,omitempty"`
	UserSubjectId      string                 `protobuf:"bytes,13,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	IsPrivate          bool                   `protobuf:"varint,14,opt,name=IsPrivate,proto3" json:"IsPrivate,omitempty"`
	AssignorCommission *common.MoneyDocument  `protobuf:"bytes,15,opt,name=AssignorCommission,proto3" json:"AssignorCommission,omitempty"`
	ReceiverCommission *common.MoneyDocument  `protobuf:"bytes,16,opt,name=ReceiverCommission,proto3" json:"ReceiverCommission,omitempty"`
	ManagerId          string                 `protobuf:"bytes,17,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId      string                 `protobuf:"bytes,18,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id                 string                 `protobuf:"bytes,19,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ChequeTransactionIntegratedCommand) Reset() {
	*x = ChequeTransactionIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChequeTransactionIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChequeTransactionIntegratedCommand) ProtoMessage() {}

func (x *ChequeTransactionIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChequeTransactionIntegratedCommand.ProtoReflect.Descriptor instead.
func (*ChequeTransactionIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{8}
}

func (x *ChequeTransactionIntegratedCommand) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *ChequeTransactionIntegratedCommand) GetBankName() *LogMetadata {
	if x != nil {
		return x.BankName
	}
	return nil
}

func (x *ChequeTransactionIntegratedCommand) GetDocumentNumber() *LogMetadata {
	if x != nil {
		return x.DocumentNumber
	}
	return nil
}

func (x *ChequeTransactionIntegratedCommand) GetAmount() *LogMetadata {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ChequeTransactionIntegratedCommand) GetCurrencyCode() *LogMetadata {
	if x != nil {
		return x.CurrencyCode
	}
	return nil
}

func (x *ChequeTransactionIntegratedCommand) GetDocDate() *LogMetadata {
	if x != nil {
		return x.DocDate
	}
	return nil
}

func (x *ChequeTransactionIntegratedCommand) GetAccountTitle() *LogMetadata {
	if x != nil {
		return x.AccountTitle
	}
	return nil
}

func (x *ChequeTransactionIntegratedCommand) GetOpposite() *LogMetadata {
	if x != nil {
		return x.Opposite
	}
	return nil
}

func (x *ChequeTransactionIntegratedCommand) GetDescription() *LogMetadata {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ChequeTransactionIntegratedCommand) GetChequeStatus() ChequeStatusEnum {
	if x != nil {
		return x.ChequeStatus
	}
	return ChequeStatusEnum_SavedToCustomerAccount
}

func (x *ChequeTransactionIntegratedCommand) GetIsPayment() bool {
	if x != nil {
		return x.IsPayment
	}
	return false
}

func (x *ChequeTransactionIntegratedCommand) GetLogType() LogType {
	if x != nil {
		return x.LogType
	}
	return LogType_Create
}

func (x *ChequeTransactionIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *ChequeTransactionIntegratedCommand) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *ChequeTransactionIntegratedCommand) GetAssignorCommission() *common.MoneyDocument {
	if x != nil {
		return x.AssignorCommission
	}
	return nil
}

func (x *ChequeTransactionIntegratedCommand) GetReceiverCommission() *common.MoneyDocument {
	if x != nil {
		return x.ReceiverCommission
	}
	return nil
}

func (x *ChequeTransactionIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *ChequeTransactionIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *ChequeTransactionIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CompanyActionLogIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrackingId    string                 `protobuf:"bytes,1,opt,name=TrackingId,proto3" json:"TrackingId,omitempty"`
	CompanyName   *LogMetadata           `protobuf:"bytes,2,opt,name=CompanyName,proto3" json:"CompanyName,omitempty"`
	LogType       LogType                `protobuf:"varint,3,opt,name=LogType,proto3,enum=ActionLog.LogType" json:"LogType,omitempty"`
	UserSubjectId string                 `protobuf:"bytes,4,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	ManagerId     string                 `protobuf:"bytes,5,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId string                 `protobuf:"bytes,6,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,7,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompanyActionLogIntegratedCommand) Reset() {
	*x = CompanyActionLogIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompanyActionLogIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyActionLogIntegratedCommand) ProtoMessage() {}

func (x *CompanyActionLogIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyActionLogIntegratedCommand.ProtoReflect.Descriptor instead.
func (*CompanyActionLogIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{9}
}

func (x *CompanyActionLogIntegratedCommand) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *CompanyActionLogIntegratedCommand) GetCompanyName() *LogMetadata {
	if x != nil {
		return x.CompanyName
	}
	return nil
}

func (x *CompanyActionLogIntegratedCommand) GetLogType() LogType {
	if x != nil {
		return x.LogType
	}
	return LogType_Create
}

func (x *CompanyActionLogIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *CompanyActionLogIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *CompanyActionLogIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *CompanyActionLogIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CurrencyActionLogIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrackingId    string                 `protobuf:"bytes,1,opt,name=TrackingId,proto3" json:"TrackingId,omitempty"`
	Currency      *LogMetadata           `protobuf:"bytes,2,opt,name=Currency,proto3" json:"Currency,omitempty"`
	Rate          *LogMetadata           `protobuf:"bytes,3,opt,name=Rate,proto3" json:"Rate,omitempty"`
	LogType       LogType                `protobuf:"varint,4,opt,name=LogType,proto3,enum=ActionLog.LogType" json:"LogType,omitempty"`
	UserSubjectId string                 `protobuf:"bytes,5,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	ManagerId     string                 `protobuf:"bytes,6,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId string                 `protobuf:"bytes,7,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,8,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CurrencyActionLogIntegratedCommand) Reset() {
	*x = CurrencyActionLogIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrencyActionLogIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyActionLogIntegratedCommand) ProtoMessage() {}

func (x *CurrencyActionLogIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyActionLogIntegratedCommand.ProtoReflect.Descriptor instead.
func (*CurrencyActionLogIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{10}
}

func (x *CurrencyActionLogIntegratedCommand) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *CurrencyActionLogIntegratedCommand) GetCurrency() *LogMetadata {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *CurrencyActionLogIntegratedCommand) GetRate() *LogMetadata {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *CurrencyActionLogIntegratedCommand) GetLogType() LogType {
	if x != nil {
		return x.LogType
	}
	return LogType_Create
}

func (x *CurrencyActionLogIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *CurrencyActionLogIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *CurrencyActionLogIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *CurrencyActionLogIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CustomerAccountsTransactionLogIntegratedCommand struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	TrackingId          string                 `protobuf:"bytes,1,opt,name=TrackingId,proto3" json:"TrackingId,omitempty"`
	FromAccountFullName *LogMetadata           `protobuf:"bytes,2,opt,name=FromAccountFullName,proto3" json:"FromAccountFullName,omitempty"`
	FromCommission      *common.Money          `protobuf:"bytes,3,opt,name=FromCommission,proto3" json:"FromCommission,omitempty"`
	FromCommisionBuy    bool                   `protobuf:"varint,4,opt,name=FromCommisionBuy,proto3" json:"FromCommisionBuy,omitempty"`
	ToAccountFullName   *LogMetadata           `protobuf:"bytes,5,opt,name=ToAccountFullName,proto3" json:"ToAccountFullName,omitempty"`
	ToCommission        *common.Money          `protobuf:"bytes,6,opt,name=ToCommission,proto3" json:"ToCommission,omitempty"`
	ToCommisionBuy      bool                   `protobuf:"varint,7,opt,name=ToCommisionBuy,proto3" json:"ToCommisionBuy,omitempty"`
	Money               *common.Money          `protobuf:"bytes,8,opt,name=Money,proto3" json:"Money,omitempty"`
	Description         *LogMetadata           `protobuf:"bytes,9,opt,name=Description,proto3" json:"Description,omitempty"`
	LogType             LogType                `protobuf:"varint,10,opt,name=LogType,proto3,enum=ActionLog.LogType" json:"LogType,omitempty"`
	UserSubjectId       string                 `protobuf:"bytes,11,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	IsPrivate           bool                   `protobuf:"varint,12,opt,name=IsPrivate,proto3" json:"IsPrivate,omitempty"`
	ManagerId           string                 `protobuf:"bytes,13,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId       string                 `protobuf:"bytes,14,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id                  string                 `protobuf:"bytes,15,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CustomerAccountsTransactionLogIntegratedCommand) Reset() {
	*x = CustomerAccountsTransactionLogIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomerAccountsTransactionLogIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerAccountsTransactionLogIntegratedCommand) ProtoMessage() {}

func (x *CustomerAccountsTransactionLogIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerAccountsTransactionLogIntegratedCommand.ProtoReflect.Descriptor instead.
func (*CustomerAccountsTransactionLogIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{11}
}

func (x *CustomerAccountsTransactionLogIntegratedCommand) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *CustomerAccountsTransactionLogIntegratedCommand) GetFromAccountFullName() *LogMetadata {
	if x != nil {
		return x.FromAccountFullName
	}
	return nil
}

func (x *CustomerAccountsTransactionLogIntegratedCommand) GetFromCommission() *common.Money {
	if x != nil {
		return x.FromCommission
	}
	return nil
}

func (x *CustomerAccountsTransactionLogIntegratedCommand) GetFromCommisionBuy() bool {
	if x != nil {
		return x.FromCommisionBuy
	}
	return false
}

func (x *CustomerAccountsTransactionLogIntegratedCommand) GetToAccountFullName() *LogMetadata {
	if x != nil {
		return x.ToAccountFullName
	}
	return nil
}

func (x *CustomerAccountsTransactionLogIntegratedCommand) GetToCommission() *common.Money {
	if x != nil {
		return x.ToCommission
	}
	return nil
}

func (x *CustomerAccountsTransactionLogIntegratedCommand) GetToCommisionBuy() bool {
	if x != nil {
		return x.ToCommisionBuy
	}
	return false
}

func (x *CustomerAccountsTransactionLogIntegratedCommand) GetMoney() *common.Money {
	if x != nil {
		return x.Money
	}
	return nil
}

func (x *CustomerAccountsTransactionLogIntegratedCommand) GetDescription() *LogMetadata {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *CustomerAccountsTransactionLogIntegratedCommand) GetLogType() LogType {
	if x != nil {
		return x.LogType
	}
	return LogType_Create
}

func (x *CustomerAccountsTransactionLogIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *CustomerAccountsTransactionLogIntegratedCommand) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *CustomerAccountsTransactionLogIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *CustomerAccountsTransactionLogIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *CustomerAccountsTransactionLogIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CustomerActionLogIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrackingId    string                 `protobuf:"bytes,1,opt,name=TrackingId,proto3" json:"TrackingId,omitempty"`
	CustomerName  *LogMetadata           `protobuf:"bytes,2,opt,name=CustomerName,proto3" json:"CustomerName,omitempty"`
	LogType       LogType                `protobuf:"varint,3,opt,name=LogType,proto3,enum=ActionLog.LogType" json:"LogType,omitempty"`
	UserSubjectId string                 `protobuf:"bytes,4,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	ManagerId     string                 `protobuf:"bytes,5,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId string                 `protobuf:"bytes,6,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,7,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomerActionLogIntegratedCommand) Reset() {
	*x = CustomerActionLogIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomerActionLogIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerActionLogIntegratedCommand) ProtoMessage() {}

func (x *CustomerActionLogIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerActionLogIntegratedCommand.ProtoReflect.Descriptor instead.
func (*CustomerActionLogIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{12}
}

func (x *CustomerActionLogIntegratedCommand) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *CustomerActionLogIntegratedCommand) GetCustomerName() *LogMetadata {
	if x != nil {
		return x.CustomerName
	}
	return nil
}

func (x *CustomerActionLogIntegratedCommand) GetLogType() LogType {
	if x != nil {
		return x.LogType
	}
	return LogType_Create
}

func (x *CustomerActionLogIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *CustomerActionLogIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *CustomerActionLogIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *CustomerActionLogIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DraftActionLogIntegratedCommand struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TrackingId       string                 `protobuf:"bytes,1,opt,name=TrackingId,proto3" json:"TrackingId,omitempty"`
	IsOutgoing       bool                   `protobuf:"varint,2,opt,name=IsOutgoing,proto3" json:"IsOutgoing,omitempty"`
	DraftOrderNumber *LogMetadata           `protobuf:"bytes,3,opt,name=DraftOrderNumber,proto3" json:"DraftOrderNumber,omitempty"`
	Branch           *LogMetadata           `protobuf:"bytes,4,opt,name=Branch,proto3" json:"Branch,omitempty"`
	SenderFullName   *LogMetadata           `protobuf:"bytes,5,opt,name=SenderFullName,proto3" json:"SenderFullName,omitempty"`
	ReceiverFullName *LogMetadata           `protobuf:"bytes,6,opt,name=ReceiverFullName,proto3" json:"ReceiverFullName,omitempty"`
	DraftMoney       *common.Money          `protobuf:"bytes,7,opt,name=DraftMoney,proto3" json:"DraftMoney,omitempty"`
	ReceivedMoney    *common.Money          `protobuf:"bytes,8,opt,name=ReceivedMoney,proto3" json:"ReceivedMoney,omitempty"`
	DraftCommission  *common.MoneyDocument  `protobuf:"bytes,9,opt,name=DraftCommission,proto3" json:"DraftCommission,omitempty"`
	BranchCommission *common.MoneyDocument  `protobuf:"bytes,10,opt,name=BranchCommission,proto3" json:"BranchCommission,omitempty"`
	OppositeSide     *LogMetadata           `protobuf:"bytes,11,opt,name=OppositeSide,proto3" json:"OppositeSide,omitempty"`
	Description      *LogMetadata           `protobuf:"bytes,12,opt,name=Description,proto3" json:"Description,omitempty"`
	ActionType       DraftType              `protobuf:"varint,13,opt,name=ActionType,proto3,enum=ActionLog.DraftType" json:"ActionType,omitempty"`
	LogType          LogType                `protobuf:"varint,14,opt,name=LogType,proto3,enum=ActionLog.LogType" json:"LogType,omitempty"`
	UserSubjectId    string                 `protobuf:"bytes,15,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	IsPrivate        bool                   `protobuf:"varint,16,opt,name=IsPrivate,proto3" json:"IsPrivate,omitempty"`
	Rate             string                 `protobuf:"bytes,17,opt,name=Rate,proto3" json:"Rate,omitempty"`
	ManagerId        string                 `protobuf:"bytes,18,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId    string                 `protobuf:"bytes,19,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id               string                 `protobuf:"bytes,20,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DraftActionLogIntegratedCommand) Reset() {
	*x = DraftActionLogIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DraftActionLogIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DraftActionLogIntegratedCommand) ProtoMessage() {}

func (x *DraftActionLogIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DraftActionLogIntegratedCommand.ProtoReflect.Descriptor instead.
func (*DraftActionLogIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{13}
}

func (x *DraftActionLogIntegratedCommand) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *DraftActionLogIntegratedCommand) GetIsOutgoing() bool {
	if x != nil {
		return x.IsOutgoing
	}
	return false
}

func (x *DraftActionLogIntegratedCommand) GetDraftOrderNumber() *LogMetadata {
	if x != nil {
		return x.DraftOrderNumber
	}
	return nil
}

func (x *DraftActionLogIntegratedCommand) GetBranch() *LogMetadata {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *DraftActionLogIntegratedCommand) GetSenderFullName() *LogMetadata {
	if x != nil {
		return x.SenderFullName
	}
	return nil
}

func (x *DraftActionLogIntegratedCommand) GetReceiverFullName() *LogMetadata {
	if x != nil {
		return x.ReceiverFullName
	}
	return nil
}

func (x *DraftActionLogIntegratedCommand) GetDraftMoney() *common.Money {
	if x != nil {
		return x.DraftMoney
	}
	return nil
}

func (x *DraftActionLogIntegratedCommand) GetReceivedMoney() *common.Money {
	if x != nil {
		return x.ReceivedMoney
	}
	return nil
}

func (x *DraftActionLogIntegratedCommand) GetDraftCommission() *common.MoneyDocument {
	if x != nil {
		return x.DraftCommission
	}
	return nil
}

func (x *DraftActionLogIntegratedCommand) GetBranchCommission() *common.MoneyDocument {
	if x != nil {
		return x.BranchCommission
	}
	return nil
}

func (x *DraftActionLogIntegratedCommand) GetOppositeSide() *LogMetadata {
	if x != nil {
		return x.OppositeSide
	}
	return nil
}

func (x *DraftActionLogIntegratedCommand) GetDescription() *LogMetadata {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *DraftActionLogIntegratedCommand) GetActionType() DraftType {
	if x != nil {
		return x.ActionType
	}
	return DraftType_Draft
}

func (x *DraftActionLogIntegratedCommand) GetLogType() LogType {
	if x != nil {
		return x.LogType
	}
	return LogType_Create
}

func (x *DraftActionLogIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *DraftActionLogIntegratedCommand) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *DraftActionLogIntegratedCommand) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *DraftActionLogIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *DraftActionLogIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *DraftActionLogIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ImportExcelFileLogIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BankId        *LogMetadata           `protobuf:"bytes,1,opt,name=BankId,proto3" json:"BankId,omitempty"`
	UserSubjectId string                 `protobuf:"bytes,2,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	LogType       LogType                `protobuf:"varint,3,opt,name=LogType,proto3,enum=ActionLog.LogType" json:"LogType,omitempty"`
	ManagerId     string                 `protobuf:"bytes,4,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId string                 `protobuf:"bytes,5,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,6,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImportExcelFileLogIntegratedCommand) Reset() {
	*x = ImportExcelFileLogIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImportExcelFileLogIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportExcelFileLogIntegratedCommand) ProtoMessage() {}

func (x *ImportExcelFileLogIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportExcelFileLogIntegratedCommand.ProtoReflect.Descriptor instead.
func (*ImportExcelFileLogIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{14}
}

func (x *ImportExcelFileLogIntegratedCommand) GetBankId() *LogMetadata {
	if x != nil {
		return x.BankId
	}
	return nil
}

func (x *ImportExcelFileLogIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *ImportExcelFileLogIntegratedCommand) GetLogType() LogType {
	if x != nil {
		return x.LogType
	}
	return LogType_Create
}

func (x *ImportExcelFileLogIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *ImportExcelFileLogIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *ImportExcelFileLogIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PayOrderLogIntegratedCommand struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	FromAccountId     *LogMetadata           `protobuf:"bytes,1,opt,name=FromAccountId,proto3" json:"FromAccountId,omitempty"`
	ToAccountId       *LogMetadata           `protobuf:"bytes,2,opt,name=ToAccountId,proto3" json:"ToAccountId,omitempty"`
	PayOrderReceiptId *LogMetadata           `protobuf:"bytes,3,opt,name=PayOrderReceiptId,proto3" json:"PayOrderReceiptId,omitempty"`
	UserSubjectId     string                 `protobuf:"bytes,4,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	LogType           LogType                `protobuf:"varint,5,opt,name=LogType,proto3,enum=ActionLog.LogType" json:"LogType,omitempty"`
	ManagerId         string                 `protobuf:"bytes,6,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId     string                 `protobuf:"bytes,7,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id                string                 `protobuf:"bytes,8,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PayOrderLogIntegratedCommand) Reset() {
	*x = PayOrderLogIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayOrderLogIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayOrderLogIntegratedCommand) ProtoMessage() {}

func (x *PayOrderLogIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayOrderLogIntegratedCommand.ProtoReflect.Descriptor instead.
func (*PayOrderLogIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{15}
}

func (x *PayOrderLogIntegratedCommand) GetFromAccountId() *LogMetadata {
	if x != nil {
		return x.FromAccountId
	}
	return nil
}

func (x *PayOrderLogIntegratedCommand) GetToAccountId() *LogMetadata {
	if x != nil {
		return x.ToAccountId
	}
	return nil
}

func (x *PayOrderLogIntegratedCommand) GetPayOrderReceiptId() *LogMetadata {
	if x != nil {
		return x.PayOrderReceiptId
	}
	return nil
}

func (x *PayOrderLogIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *PayOrderLogIntegratedCommand) GetLogType() LogType {
	if x != nil {
		return x.LogType
	}
	return LogType_Create
}

func (x *PayOrderLogIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *PayOrderLogIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *PayOrderLogIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PaymentOrderActionLogIntegratedCommand struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	TrackingId    string                  `protobuf:"bytes,1,opt,name=TrackingId,proto3" json:"TrackingId,omitempty"`
	FromAccount   *LogMetadata            `protobuf:"bytes,2,opt,name=FromAccount,proto3" json:"FromAccount,omitempty"`
	Amount        *LogMetadata            `protobuf:"bytes,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Currency      *LogMetadata            `protobuf:"bytes,4,opt,name=Currency,proto3" json:"Currency,omitempty"`
	OpponentInfos []*EnrollingAccountInfo `protobuf:"bytes,5,rep,name=OpponentInfos,proto3" json:"OpponentInfos,omitempty"`
	LogType       LogType                 `protobuf:"varint,6,opt,name=LogType,proto3,enum=ActionLog.LogType" json:"LogType,omitempty"`
	UserSubjectId string                  `protobuf:"bytes,7,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	ManagerId     string                  `protobuf:"bytes,8,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId string                  `protobuf:"bytes,9,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                  `protobuf:"bytes,10,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PaymentOrderActionLogIntegratedCommand) Reset() {
	*x = PaymentOrderActionLogIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PaymentOrderActionLogIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentOrderActionLogIntegratedCommand) ProtoMessage() {}

func (x *PaymentOrderActionLogIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentOrderActionLogIntegratedCommand.ProtoReflect.Descriptor instead.
func (*PaymentOrderActionLogIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{16}
}

func (x *PaymentOrderActionLogIntegratedCommand) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *PaymentOrderActionLogIntegratedCommand) GetFromAccount() *LogMetadata {
	if x != nil {
		return x.FromAccount
	}
	return nil
}

func (x *PaymentOrderActionLogIntegratedCommand) GetAmount() *LogMetadata {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *PaymentOrderActionLogIntegratedCommand) GetCurrency() *LogMetadata {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *PaymentOrderActionLogIntegratedCommand) GetOpponentInfos() []*EnrollingAccountInfo {
	if x != nil {
		return x.OpponentInfos
	}
	return nil
}

func (x *PaymentOrderActionLogIntegratedCommand) GetLogType() LogType {
	if x != nil {
		return x.LogType
	}
	return LogType_Create
}

func (x *PaymentOrderActionLogIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *PaymentOrderActionLogIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *PaymentOrderActionLogIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *PaymentOrderActionLogIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type EnrollingAccountInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	AccountId        *LogMetadata           `protobuf:"bytes,1,opt,name=AccountId,proto3" json:"AccountId,omitempty"`
	TransactionMoney *common.Money          `protobuf:"bytes,2,opt,name=TransactionMoney,proto3" json:"TransactionMoney,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *EnrollingAccountInfo) Reset() {
	*x = EnrollingAccountInfo{}
	mi := &file_ActionLog_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnrollingAccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrollingAccountInfo) ProtoMessage() {}

func (x *EnrollingAccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrollingAccountInfo.ProtoReflect.Descriptor instead.
func (*EnrollingAccountInfo) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{17}
}

func (x *EnrollingAccountInfo) GetAccountId() *LogMetadata {
	if x != nil {
		return x.AccountId
	}
	return nil
}

func (x *EnrollingAccountInfo) GetTransactionMoney() *common.Money {
	if x != nil {
		return x.TransactionMoney
	}
	return nil
}

type UnknownBankTransactionLogIntegratedCommand struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TrackingId        string                 `protobuf:"bytes,1,opt,name=TrackingId,proto3" json:"TrackingId,omitempty"`
	BankId            *LogMetadata           `protobuf:"bytes,2,opt,name=BankId,proto3" json:"BankId,omitempty"`
	TransactionNumber *LogMetadata           `protobuf:"bytes,3,opt,name=TransactionNumber,proto3" json:"TransactionNumber,omitempty"`
	LogType           LogType                `protobuf:"varint,4,opt,name=LogType,proto3,enum=ActionLog.LogType" json:"LogType,omitempty"`
	UserSubjectId     string                 `protobuf:"bytes,5,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	ManagerId         string                 `protobuf:"bytes,6,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	IsWithdraw        bool                   `protobuf:"varint,7,opt,name=IsWithdraw,proto3" json:"IsWithdraw,omitempty"`
	Money             *common.Money          `protobuf:"bytes,8,opt,name=Money,proto3" json:"Money,omitempty"`
	Description       string                 `protobuf:"bytes,9,opt,name=Description,proto3" json:"Description,omitempty"`
	CorrelationId     string                 `protobuf:"bytes,10,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id                string                 `protobuf:"bytes,11,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UnknownBankTransactionLogIntegratedCommand) Reset() {
	*x = UnknownBankTransactionLogIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnknownBankTransactionLogIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnknownBankTransactionLogIntegratedCommand) ProtoMessage() {}

func (x *UnknownBankTransactionLogIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnknownBankTransactionLogIntegratedCommand.ProtoReflect.Descriptor instead.
func (*UnknownBankTransactionLogIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{18}
}

func (x *UnknownBankTransactionLogIntegratedCommand) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *UnknownBankTransactionLogIntegratedCommand) GetBankId() *LogMetadata {
	if x != nil {
		return x.BankId
	}
	return nil
}

func (x *UnknownBankTransactionLogIntegratedCommand) GetTransactionNumber() *LogMetadata {
	if x != nil {
		return x.TransactionNumber
	}
	return nil
}

func (x *UnknownBankTransactionLogIntegratedCommand) GetLogType() LogType {
	if x != nil {
		return x.LogType
	}
	return LogType_Create
}

func (x *UnknownBankTransactionLogIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *UnknownBankTransactionLogIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *UnknownBankTransactionLogIntegratedCommand) GetIsWithdraw() bool {
	if x != nil {
		return x.IsWithdraw
	}
	return false
}

func (x *UnknownBankTransactionLogIntegratedCommand) GetMoney() *common.Money {
	if x != nil {
		return x.Money
	}
	return nil
}

func (x *UnknownBankTransactionLogIntegratedCommand) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UnknownBankTransactionLogIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *UnknownBankTransactionLogIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AddIncomingPendDraftLogIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrackingId    string                 `protobuf:"bytes,1,opt,name=TrackingId,proto3" json:"TrackingId,omitempty"`
	BranchId      *LogMetadata           `protobuf:"bytes,2,opt,name=BranchId,proto3" json:"BranchId,omitempty"`
	LogType       LogType                `protobuf:"varint,3,opt,name=LogType,proto3,enum=ActionLog.LogType" json:"LogType,omitempty"`
	UserSubjectId string                 `protobuf:"bytes,4,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	DraftNumber   *LogMetadata           `protobuf:"bytes,5,opt,name=DraftNumber,proto3" json:"DraftNumber,omitempty"`
	Amount        float64                `protobuf:"fixed64,6,opt,name=Amount,proto3" json:"Amount,omitempty"`
	CurrencyCode  string                 `protobuf:"bytes,7,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
	ManagerId     string                 `protobuf:"bytes,8,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId string                 `protobuf:"bytes,9,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,10,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddIncomingPendDraftLogIntegratedCommand) Reset() {
	*x = AddIncomingPendDraftLogIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddIncomingPendDraftLogIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIncomingPendDraftLogIntegratedCommand) ProtoMessage() {}

func (x *AddIncomingPendDraftLogIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIncomingPendDraftLogIntegratedCommand.ProtoReflect.Descriptor instead.
func (*AddIncomingPendDraftLogIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{19}
}

func (x *AddIncomingPendDraftLogIntegratedCommand) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *AddIncomingPendDraftLogIntegratedCommand) GetBranchId() *LogMetadata {
	if x != nil {
		return x.BranchId
	}
	return nil
}

func (x *AddIncomingPendDraftLogIntegratedCommand) GetLogType() LogType {
	if x != nil {
		return x.LogType
	}
	return LogType_Create
}

func (x *AddIncomingPendDraftLogIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *AddIncomingPendDraftLogIntegratedCommand) GetDraftNumber() *LogMetadata {
	if x != nil {
		return x.DraftNumber
	}
	return nil
}

func (x *AddIncomingPendDraftLogIntegratedCommand) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AddIncomingPendDraftLogIntegratedCommand) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *AddIncomingPendDraftLogIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *AddIncomingPendDraftLogIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *AddIncomingPendDraftLogIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemovePendIncomingDraftLogIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DraftId       string                 `protobuf:"bytes,1,opt,name=DraftId,proto3" json:"DraftId,omitempty"`
	BranchId      *LogMetadata           `protobuf:"bytes,2,opt,name=BranchId,proto3" json:"BranchId,omitempty"`
	DraftNumber   *LogMetadata           `protobuf:"bytes,3,opt,name=DraftNumber,proto3" json:"DraftNumber,omitempty"`
	UserSubjectId string                 `protobuf:"bytes,4,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	LogType       LogType                `protobuf:"varint,5,opt,name=LogType,proto3,enum=ActionLog.LogType" json:"LogType,omitempty"`
	Amount        float64                `protobuf:"fixed64,6,opt,name=Amount,proto3" json:"Amount,omitempty"`
	CurrencyCode  string                 `protobuf:"bytes,7,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
	ManagerId     string                 `protobuf:"bytes,8,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId string                 `protobuf:"bytes,9,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,10,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemovePendIncomingDraftLogIntegratedCommand) Reset() {
	*x = RemovePendIncomingDraftLogIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemovePendIncomingDraftLogIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePendIncomingDraftLogIntegratedCommand) ProtoMessage() {}

func (x *RemovePendIncomingDraftLogIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePendIncomingDraftLogIntegratedCommand.ProtoReflect.Descriptor instead.
func (*RemovePendIncomingDraftLogIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{20}
}

func (x *RemovePendIncomingDraftLogIntegratedCommand) GetDraftId() string {
	if x != nil {
		return x.DraftId
	}
	return ""
}

func (x *RemovePendIncomingDraftLogIntegratedCommand) GetBranchId() *LogMetadata {
	if x != nil {
		return x.BranchId
	}
	return nil
}

func (x *RemovePendIncomingDraftLogIntegratedCommand) GetDraftNumber() *LogMetadata {
	if x != nil {
		return x.DraftNumber
	}
	return nil
}

func (x *RemovePendIncomingDraftLogIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *RemovePendIncomingDraftLogIntegratedCommand) GetLogType() LogType {
	if x != nil {
		return x.LogType
	}
	return LogType_Create
}

func (x *RemovePendIncomingDraftLogIntegratedCommand) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RemovePendIncomingDraftLogIntegratedCommand) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *RemovePendIncomingDraftLogIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *RemovePendIncomingDraftLogIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *RemovePendIncomingDraftLogIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveAccountingCheckoutActionLogsIntegratedCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrackingId    string                 `protobuf:"bytes,1,opt,name=TrackingId,proto3" json:"TrackingId,omitempty"`
	AccountName   string                 `protobuf:"bytes,2,opt,name=AccountName,proto3" json:"AccountName,omitempty"`
	LogType       LogType                `protobuf:"varint,3,opt,name=LogType,proto3,enum=ActionLog.LogType" json:"LogType,omitempty"`
	UserSubjectId string                 `protobuf:"bytes,4,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	ManagerId     string                 `protobuf:"bytes,5,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId string                 `protobuf:"bytes,6,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                 `protobuf:"bytes,7,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveAccountingCheckoutActionLogsIntegratedCommand) Reset() {
	*x = RemoveAccountingCheckoutActionLogsIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveAccountingCheckoutActionLogsIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAccountingCheckoutActionLogsIntegratedCommand) ProtoMessage() {}

func (x *RemoveAccountingCheckoutActionLogsIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAccountingCheckoutActionLogsIntegratedCommand.ProtoReflect.Descriptor instead.
func (*RemoveAccountingCheckoutActionLogsIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{21}
}

func (x *RemoveAccountingCheckoutActionLogsIntegratedCommand) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *RemoveAccountingCheckoutActionLogsIntegratedCommand) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *RemoveAccountingCheckoutActionLogsIntegratedCommand) GetLogType() LogType {
	if x != nil {
		return x.LogType
	}
	return LogType_Create
}

func (x *RemoveAccountingCheckoutActionLogsIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *RemoveAccountingCheckoutActionLogsIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *RemoveAccountingCheckoutActionLogsIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *RemoveAccountingCheckoutActionLogsIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CheckoutStatusIntegratedItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CurrencyCode  string                 `protobuf:"bytes,1,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
	Balance       float64                `protobuf:"fixed64,2,opt,name=Balance,proto3" json:"Balance,omitempty"`
	IsDebt        bool                   `protobuf:"varint,3,opt,name=IsDebt,proto3" json:"IsDebt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckoutStatusIntegratedItem) Reset() {
	*x = CheckoutStatusIntegratedItem{}
	mi := &file_ActionLog_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckoutStatusIntegratedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckoutStatusIntegratedItem) ProtoMessage() {}

func (x *CheckoutStatusIntegratedItem) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckoutStatusIntegratedItem.ProtoReflect.Descriptor instead.
func (*CheckoutStatusIntegratedItem) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{22}
}

func (x *CheckoutStatusIntegratedItem) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *CheckoutStatusIntegratedItem) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *CheckoutStatusIntegratedItem) GetIsDebt() bool {
	if x != nil {
		return x.IsDebt
	}
	return false
}

type AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	TrackingId    string                          `protobuf:"bytes,1,opt,name=TrackingId,proto3" json:"TrackingId,omitempty"`
	Statuses      []*CheckoutStatusIntegratedItem `protobuf:"bytes,2,rep,name=Statuses,proto3" json:"Statuses,omitempty"`
	InitialMonies []*common.MoneyDocument         `protobuf:"bytes,3,rep,name=InitialMonies,proto3" json:"InitialMonies,omitempty"`
	AccountName   string                          `protobuf:"bytes,4,opt,name=AccountName,proto3" json:"AccountName,omitempty"`
	LogType       LogType                         `protobuf:"varint,5,opt,name=LogType,proto3,enum=ActionLog.LogType" json:"LogType,omitempty"`
	UserSubjectId string                          `protobuf:"bytes,6,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	ManagerId     string                          `protobuf:"bytes,7,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId string                          `protobuf:"bytes,8,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                          `protobuf:"bytes,9,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand) Reset() {
	*x = AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand) ProtoMessage() {}

func (x *AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand.ProtoReflect.Descriptor instead.
func (*AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{23}
}

func (x *AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand) GetStatuses() []*CheckoutStatusIntegratedItem {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand) GetInitialMonies() []*common.MoneyDocument {
	if x != nil {
		return x.InitialMonies
	}
	return nil
}

func (x *AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand) GetLogType() LogType {
	if x != nil {
		return x.LogType
	}
	return LogType_Create
}

func (x *AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AddAccountingCheckoutByDateActionLogsIntegratedCommand struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	TrackingId    string                          `protobuf:"bytes,1,opt,name=TrackingId,proto3" json:"TrackingId,omitempty"`
	Statuses      []*CheckoutStatusIntegratedItem `protobuf:"bytes,2,rep,name=Statuses,proto3" json:"Statuses,omitempty"`
	AccountName   string                          `protobuf:"bytes,3,opt,name=AccountName,proto3" json:"AccountName,omitempty"`
	LogType       LogType                         `protobuf:"varint,4,opt,name=LogType,proto3,enum=ActionLog.LogType" json:"LogType,omitempty"`
	UserSubjectId string                          `protobuf:"bytes,5,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	ManagerId     string                          `protobuf:"bytes,6,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId string                          `protobuf:"bytes,7,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                          `protobuf:"bytes,8,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAccountingCheckoutByDateActionLogsIntegratedCommand) Reset() {
	*x = AddAccountingCheckoutByDateActionLogsIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAccountingCheckoutByDateActionLogsIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAccountingCheckoutByDateActionLogsIntegratedCommand) ProtoMessage() {}

func (x *AddAccountingCheckoutByDateActionLogsIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAccountingCheckoutByDateActionLogsIntegratedCommand.ProtoReflect.Descriptor instead.
func (*AddAccountingCheckoutByDateActionLogsIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{24}
}

func (x *AddAccountingCheckoutByDateActionLogsIntegratedCommand) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *AddAccountingCheckoutByDateActionLogsIntegratedCommand) GetStatuses() []*CheckoutStatusIntegratedItem {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *AddAccountingCheckoutByDateActionLogsIntegratedCommand) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *AddAccountingCheckoutByDateActionLogsIntegratedCommand) GetLogType() LogType {
	if x != nil {
		return x.LogType
	}
	return LogType_Create
}

func (x *AddAccountingCheckoutByDateActionLogsIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *AddAccountingCheckoutByDateActionLogsIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *AddAccountingCheckoutByDateActionLogsIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *AddAccountingCheckoutByDateActionLogsIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AddAccountingCheckoutByIndexActionLogsIntegratedCommand struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	TrackingId    string                          `protobuf:"bytes,1,opt,name=TrackingId,proto3" json:"TrackingId,omitempty"`
	Statuses      []*CheckoutStatusIntegratedItem `protobuf:"bytes,2,rep,name=Statuses,proto3" json:"Statuses,omitempty"`
	AccountName   string                          `protobuf:"bytes,3,opt,name=AccountName,proto3" json:"AccountName,omitempty"`
	LogType       LogType                         `protobuf:"varint,4,opt,name=LogType,proto3,enum=ActionLog.LogType" json:"LogType,omitempty"`
	RowNumber     int32                           `protobuf:"varint,5,opt,name=RowNumber,proto3" json:"RowNumber,omitempty"`
	UserSubjectId string                          `protobuf:"bytes,6,opt,name=UserSubjectId,proto3" json:"UserSubjectId,omitempty"`
	ManagerId     string                          `protobuf:"bytes,7,opt,name=ManagerId,proto3" json:"ManagerId,omitempty"`
	CorrelationId string                          `protobuf:"bytes,8,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	Id            string                          `protobuf:"bytes,9,opt,name=Id,proto3" json:"Id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAccountingCheckoutByIndexActionLogsIntegratedCommand) Reset() {
	*x = AddAccountingCheckoutByIndexActionLogsIntegratedCommand{}
	mi := &file_ActionLog_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAccountingCheckoutByIndexActionLogsIntegratedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAccountingCheckoutByIndexActionLogsIntegratedCommand) ProtoMessage() {}

func (x *AddAccountingCheckoutByIndexActionLogsIntegratedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAccountingCheckoutByIndexActionLogsIntegratedCommand.ProtoReflect.Descriptor instead.
func (*AddAccountingCheckoutByIndexActionLogsIntegratedCommand) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{25}
}

func (x *AddAccountingCheckoutByIndexActionLogsIntegratedCommand) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *AddAccountingCheckoutByIndexActionLogsIntegratedCommand) GetStatuses() []*CheckoutStatusIntegratedItem {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *AddAccountingCheckoutByIndexActionLogsIntegratedCommand) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *AddAccountingCheckoutByIndexActionLogsIntegratedCommand) GetLogType() LogType {
	if x != nil {
		return x.LogType
	}
	return LogType_Create
}

func (x *AddAccountingCheckoutByIndexActionLogsIntegratedCommand) GetRowNumber() int32 {
	if x != nil {
		return x.RowNumber
	}
	return 0
}

func (x *AddAccountingCheckoutByIndexActionLogsIntegratedCommand) GetUserSubjectId() string {
	if x != nil {
		return x.UserSubjectId
	}
	return ""
}

func (x *AddAccountingCheckoutByIndexActionLogsIntegratedCommand) GetManagerId() string {
	if x != nil {
		return x.ManagerId
	}
	return ""
}

func (x *AddAccountingCheckoutByIndexActionLogsIntegratedCommand) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *AddAccountingCheckoutByIndexActionLogsIntegratedCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type LogMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	MetadataType  int32                  `protobuf:"varint,2,opt,name=MetadataType,proto3" json:"MetadataType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogMetadata) Reset() {
	*x = LogMetadata{}
	mi := &file_ActionLog_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMetadata) ProtoMessage() {}

func (x *LogMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_ActionLog_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMetadata.ProtoReflect.Descriptor instead.
func (*LogMetadata) Descriptor() ([]byte, []int) {
	return file_ActionLog_proto_rawDescGZIP(), []int{26}
}

func (x *LogMetadata) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *LogMetadata) GetMetadataType() int32 {
	if x != nil {
		return x.MetadataType
	}
	return 0
}

var File_ActionLog_proto protoreflect.FileDescriptor

const file_ActionLog_proto_rawDesc = "" +
	"\n" +
	"\x0fActionLog.proto\x12\tActionLog\x1a\fCommon.proto\"\x91\x02\n" +
	"!AccountActionLogIntegratedCommand\x12\x1e\n" +
	"\n" +
	"TrackingId\x18\x01 \x01(\tR\n" +
	"TrackingId\x128\n" +
	"\vAccountName\x18\x02 \x01(\v2\x16.ActionLog.LogMetadataR\vAccountName\x12\x18\n" +
	"\aLogType\x18\x03 \x01(\tR\aLogType\x12$\n" +
	"\rUserSubjectId\x18\x04 \x01(\tR\rUserSubjectId\x12\x1c\n" +
	"\tManagerId\x18\x05 \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\x06 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\a \x01(\tR\x02Id\"\xf4\x02\n" +
	"\x1eBankActionLogIntegratedCommand\x12\x1e\n" +
	"\n" +
	"TrackingId\x18\x01 \x01(\tR\n" +
	"TrackingId\x122\n" +
	"\bBankName\x18\x02 \x01(\v2\x16.ActionLog.LogMetadataR\bBankName\x122\n" +
	"\bCurrency\x18\x03 \x01(\v2\x16.ActionLog.LogMetadataR\bCurrency\x126\n" +
	"\n" +
	"CardNumber\x18\x04 \x01(\v2\x16.ActionLog.LogMetadataR\n" +
	"CardNumber\x12\x18\n" +
	"\aLogType\x18\x05 \x01(\tR\aLogType\x12$\n" +
	"\rUserSubjectId\x18\x06 \x01(\tR\rUserSubjectId\x12\x1c\n" +
	"\tManagerId\x18\a \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\b \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\t \x01(\tR\x02Id\"\xcd\x04\n" +
	")ChangeBankTransactionLogIntegratedCommand\x12\x1e\n" +
	"\n" +
	"TrackingId\x18\x01 \x01(\tR\n" +
	"TrackingId\x12>\n" +
	"\x0eOpponentInfoes\x18\x02 \x03(\v2\x16.Common.AccountingInfoR\x0eOpponentInfoes\x12@\n" +
	"\x0fBankAccountName\x18\x03 \x01(\v2\x16.ActionLog.LogMetadataR\x0fBankAccountName\x128\n" +
	"\vDescription\x18\x04 \x01(\v2\x16.ActionLog.LogMetadataR\vDescription\x12 \n" +
	"\vIsInterBank\x18\x05 \x01(\bR\vIsInterBank\x12,\n" +
	"\aLogType\x18\x06 \x01(\x0e2\x12.ActionLog.LogTypeR\aLogType\x12$\n" +
	"\rUserSubjectId\x18\a \x01(\tR\rUserSubjectId\x12&\n" +
	"\x0eTrackingNumber\x18\b \x01(\tR\x0eTrackingNumber\x124\n" +
	"\n" +
	"IsWithdraw\x18\t \x01(\v2\x14.Common.NullableBoolR\n" +
	"IsWithdraw\x12\x1c\n" +
	"\tIsPrivate\x18\n" +
	" \x01(\bR\tIsPrivate\x12\x1c\n" +
	"\tManagerId\x18\v \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\f \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\r \x01(\tR\x02Id\"\x92\x03\n" +
	" BranchActionLogIntegratedCommand\x12\x1e\n" +
	"\n" +
	"TrackingId\x18\x01 \x01(\tR\n" +
	"TrackingId\x126\n" +
	"\n" +
	"BranchName\x18\x02 \x01(\v2\x16.ActionLog.LogMetadataR\n" +
	"BranchName\x122\n" +
	"\bCurrency\x18\x03 \x01(\v2\x16.ActionLog.LogMetadataR\bCurrency\x12:\n" +
	"\fCustomerName\x18\x04 \x01(\v2\x16.ActionLog.LogMetadataR\fCustomerName\x12,\n" +
	"\aLogType\x18\x05 \x01(\x0e2\x12.ActionLog.LogTypeR\aLogType\x12$\n" +
	"\rUserSubjectId\x18\x06 \x01(\tR\rUserSubjectId\x12\x1c\n" +
	"\tManagerId\x18\a \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\b \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\t \x01(\tR\x02Id\"\xd3\x05\n" +
	"#BuySellCurrencyLogIntegratedCommand\x12\x1e\n" +
	"\n" +
	"TrackingId\x18\x01 \x01(\tR\n" +
	"TrackingId\x12\x14\n" +
	"\x05IsBuy\x18\x02 \x01(\bR\x05IsBuy\x12-\n" +
	"\n" +
	"BuyerMoney\x18\x03 \x01(\v2\r.Common.MoneyR\n" +
	"BuyerMoney\x12?\n" +
	"\x0fBuyerCommission\x18\x04 \x01(\v2\x15.Common.MoneyDocumentR\x0fBuyerCommission\x12<\n" +
	"\rBuyerFullName\x18\x05 \x01(\v2\x16.ActionLog.LogMetadataR\rBuyerFullName\x12>\n" +
	"\x0eSellerFullName\x18\x06 \x01(\v2\x16.ActionLog.LogMetadataR\x0eSellerFullName\x12/\n" +
	"\vSellerMoney\x18\a \x01(\v2\r.Common.MoneyR\vSellerMoney\x12A\n" +
	"\x10SellerCommission\x18\b \x01(\v2\x15.Common.MoneyDocumentR\x10SellerCommission\x12*\n" +
	"\x04Rate\x18\t \x01(\v2\x16.ActionLog.LogMetadataR\x04Rate\x12,\n" +
	"\aLogType\x18\n" +
	" \x01(\x0e2\x12.ActionLog.LogTypeR\aLogType\x12$\n" +
	"\rUserSubjectId\x18\v \x01(\tR\rUserSubjectId\x12\x1c\n" +
	"\tIsPrivate\x18\f \x01(\bR\tIsPrivate\x12 \n" +
	"\vDescription\x18\r \x01(\tR\vDescription\x12\x1e\n" +
	"\n" +
	"ManangerId\x18\x0e \x01(\tR\n" +
	"ManangerId\x12$\n" +
	"\rCorrelationId\x18\x0f \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x10 \x01(\tR\x02Id\"\xf7\x03\n" +
	"#CashTransactionLogIntegratedCommand\x12\x1e\n" +
	"\n" +
	"TrackingId\x18\x01 \x01(\tR\n" +
	"TrackingId\x12P\n" +
	"\x17OppositeAccountFullName\x18\x02 \x01(\v2\x16.ActionLog.LogMetadataR\x17OppositeAccountFullName\x128\n" +
	"\vDescription\x18\x03 \x01(\v2\x16.ActionLog.LogMetadataR\vDescription\x12,\n" +
	"\aLogType\x18\x04 \x01(\x0e2\x12.ActionLog.LogTypeR\aLogType\x12$\n" +
	"\rUserSubjectId\x18\x05 \x01(\tR\rUserSubjectId\x12\x1e\n" +
	"\n" +
	"IsReceived\x18\x06 \x01(\bR\n" +
	"IsReceived\x12#\n" +
	"\x05Money\x18\a \x01(\v2\r.Common.MoneyR\x05Money\x127\n" +
	"\x0fCommissionMoney\x18\b \x01(\v2\r.Common.MoneyR\x0fCommissionMoney\x12\x1c\n" +
	"\tManagerId\x18\t \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\n" +
	" \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\v \x01(\tR\x02Id\"\x8d\x06\n" +
	"\x1fChangeDraftLogIntegratedCommand\x12\x1e\n" +
	"\n" +
	"TrackingId\x18\x01 \x01(\tR\n" +
	"TrackingId\x12B\n" +
	"\x10DraftOrderNumber\x18\x02 \x01(\v2\x16.ActionLog.LogMetadataR\x10DraftOrderNumber\x12.\n" +
	"\x06Branch\x18\x03 \x01(\v2\x16.ActionLog.LogMetadataR\x06Branch\x12.\n" +
	"\x06Amount\x18\x04 \x01(\v2\x16.ActionLog.LogMetadataR\x06Amount\x122\n" +
	"\bCurrency\x18\x05 \x01(\v2\x16.ActionLog.LogMetadataR\bCurrency\x120\n" +
	"\aOldRate\x18\x06 \x01(\v2\x16.ActionLog.LogMetadataR\aOldRate\x120\n" +
	"\aNewRate\x18\a \x01(\v2\x16.ActionLog.LogMetadataR\aNewRate\x12:\n" +
	"\fRateCurrency\x18\b \x01(\v2\x16.ActionLog.LogMetadataR\fRateCurrency\x12B\n" +
	"\x10CommissionAmount\x18\t \x01(\v2\x16.ActionLog.LogMetadataR\x10CommissionAmount\x12F\n" +
	"\x12CommissionCurrency\x18\n" +
	" \x01(\v2\x16.ActionLog.LogMetadataR\x12CommissionCurrency\x12,\n" +
	"\aLogType\x18\v \x01(\x0e2\x12.ActionLog.LogTypeR\aLogType\x12$\n" +
	"\rUserSubjectId\x18\f \x01(\tR\rUserSubjectId\x12\x1c\n" +
	"\tIsPrivate\x18\r \x01(\bR\tIsPrivate\x12\x1e\n" +
	"\n" +
	"ManangerId\x18\x0e \x01(\tR\n" +
	"ManangerId\x12$\n" +
	"\rCorrelationId\x18\x0f \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x10 \x01(\tR\x02Id\"\x94\x04\n" +
	")ChangeRateDraftActionLogIntegratedCommand\x12\x1e\n" +
	"\n" +
	"TrackingId\x18\x01 \x01(\tR\n" +
	"TrackingId\x12 \n" +
	"\vDraftNumber\x18\x02 \x01(\tR\vDraftNumber\x12\x1e\n" +
	"\n" +
	"IsOutgoing\x18\x03 \x01(\bR\n" +
	"IsOutgoing\x12.\n" +
	"\x06Branch\x18\x04 \x01(\v2\x16.ActionLog.LogMetadataR\x06Branch\x12\x18\n" +
	"\aOldRate\x18\x05 \x01(\tR\aOldRate\x12\x18\n" +
	"\aNewRate\x18\x06 \x01(\tR\aNewRate\x12-\n" +
	"\n" +
	"DraftMoney\x18\a \x01(\v2\r.Common.MoneyR\n" +
	"DraftMoney\x127\n" +
	"\x0fEquivalentMoney\x18\b \x01(\v2\r.Common.MoneyR\x0fEquivalentMoney\x12?\n" +
	"\x0fDraftCommission\x18\t \x01(\v2\x15.Common.MoneyDocumentR\x0fDraftCommission\x12$\n" +
	"\rUserSubjectId\x18\n" +
	" \x01(\tR\rUserSubjectId\x12\x1c\n" +
	"\tManagerId\x18\v \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\f \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\r \x01(\tR\x02Id\"\xb3\a\n" +
	"\"ChequeTransactionIntegratedCommand\x12\x1e\n" +
	"\n" +
	"TrackingId\x18\x01 \x01(\tR\n" +
	"TrackingId\x122\n" +
	"\bBankName\x18\x02 \x01(\v2\x16.ActionLog.LogMetadataR\bBankName\x12>\n" +
	"\x0eDocumentNumber\x18\x03 \x01(\v2\x16.ActionLog.LogMetadataR\x0eDocumentNumber\x12.\n" +
	"\x06Amount\x18\x04 \x01(\v2\x16.ActionLog.LogMetadataR\x06Amount\x12:\n" +
	"\fCurrencyCode\x18\x05 \x01(\v2\x16.ActionLog.LogMetadataR\fCurrencyCode\x120\n" +
	"\aDocDate\x18\x06 \x01(\v2\x16.ActionLog.LogMetadataR\aDocDate\x12:\n" +
	"\fAccountTitle\x18\a \x01(\v2\x16.ActionLog.LogMetadataR\fAccountTitle\x122\n" +
	"\bOpposite\x18\b \x01(\v2\x16.ActionLog.LogMetadataR\bOpposite\x128\n" +
	"\vDescription\x18\t \x01(\v2\x16.ActionLog.LogMetadataR\vDescription\x12?\n" +
	"\fChequeStatus\x18\n" +
	" \x01(\x0e2\x1b.ActionLog.ChequeStatusEnumR\fChequeStatus\x12\x1c\n" +
	"\tIsPayment\x18\v \x01(\bR\tIsPayment\x12,\n" +
	"\aLogType\x18\f \x01(\x0e2\x12.ActionLog.LogTypeR\aLogType\x12$\n" +
	"\rUserSubjectId\x18\r \x01(\tR\rUserSubjectId\x12\x1c\n" +
	"\tIsPrivate\x18\x0e \x01(\bR\tIsPrivate\x12E\n" +
	"\x12AssignorCommission\x18\x0f \x01(\v2\x15.Common.MoneyDocumentR\x12AssignorCommission\x12E\n" +
	"\x12ReceiverCommission\x18\x10 \x01(\v2\x15.Common.MoneyDocumentR\x12ReceiverCommission\x12\x1c\n" +
	"\tManagerId\x18\x11 \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\x12 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x13 \x01(\tR\x02Id\"\xa5\x02\n" +
	"!CompanyActionLogIntegratedCommand\x12\x1e\n" +
	"\n" +
	"TrackingId\x18\x01 \x01(\tR\n" +
	"TrackingId\x128\n" +
	"\vCompanyName\x18\x02 \x01(\v2\x16.ActionLog.LogMetadataR\vCompanyName\x12,\n" +
	"\aLogType\x18\x03 \x01(\x0e2\x12.ActionLog.LogTypeR\aLogType\x12$\n" +
	"\rUserSubjectId\x18\x04 \x01(\tR\rUserSubjectId\x12\x1c\n" +
	"\tManagerId\x18\x05 \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\x06 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\a \x01(\tR\x02Id\"\xcc\x02\n" +
	"\"CurrencyActionLogIntegratedCommand\x12\x1e\n" +
	"\n" +
	"TrackingId\x18\x01 \x01(\tR\n" +
	"TrackingId\x122\n" +
	"\bCurrency\x18\x02 \x01(\v2\x16.ActionLog.LogMetadataR\bCurrency\x12*\n" +
	"\x04Rate\x18\x03 \x01(\v2\x16.ActionLog.LogMetadataR\x04Rate\x12,\n" +
	"\aLogType\x18\x04 \x01(\x0e2\x12.ActionLog.LogTypeR\aLogType\x12$\n" +
	"\rUserSubjectId\x18\x05 \x01(\tR\rUserSubjectId\x12\x1c\n" +
	"\tManagerId\x18\x06 \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\a \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\b \x01(\tR\x02Id\"\xc4\x05\n" +
	"/CustomerAccountsTransactionLogIntegratedCommand\x12\x1e\n" +
	"\n" +
	"TrackingId\x18\x01 \x01(\tR\n" +
	"TrackingId\x12H\n" +
	"\x13FromAccountFullName\x18\x02 \x01(\v2\x16.ActionLog.LogMetadataR\x13FromAccountFullName\x125\n" +
	"\x0eFromCommission\x18\x03 \x01(\v2\r.Common.MoneyR\x0eFromCommission\x12*\n" +
	"\x10FromCommisionBuy\x18\x04 \x01(\bR\x10FromCommisionBuy\x12D\n" +
	"\x11ToAccountFullName\x18\x05 \x01(\v2\x16.ActionLog.LogMetadataR\x11ToAccountFullName\x121\n" +
	"\fToCommission\x18\x06 \x01(\v2\r.Common.MoneyR\fToCommission\x12&\n" +
	"\x0eToCommisionBuy\x18\a \x01(\bR\x0eToCommisionBuy\x12#\n" +
	"\x05Money\x18\b \x01(\v2\r.Common.MoneyR\x05Money\x128\n" +
	"\vDescription\x18\t \x01(\v2\x16.ActionLog.LogMetadataR\vDescription\x12,\n" +
	"\aLogType\x18\n" +
	" \x01(\x0e2\x12.ActionLog.LogTypeR\aLogType\x12$\n" +
	"\rUserSubjectId\x18\v \x01(\tR\rUserSubjectId\x12\x1c\n" +
	"\tIsPrivate\x18\f \x01(\bR\tIsPrivate\x12\x1c\n" +
	"\tManagerId\x18\r \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\x0e \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x0f \x01(\tR\x02Id\"\xa8\x02\n" +
	"\"CustomerActionLogIntegratedCommand\x12\x1e\n" +
	"\n" +
	"TrackingId\x18\x01 \x01(\tR\n" +
	"TrackingId\x12:\n" +
	"\fCustomerName\x18\x02 \x01(\v2\x16.ActionLog.LogMetadataR\fCustomerName\x12,\n" +
	"\aLogType\x18\x03 \x01(\x0e2\x12.ActionLog.LogTypeR\aLogType\x12$\n" +
	"\rUserSubjectId\x18\x04 \x01(\tR\rUserSubjectId\x12\x1c\n" +
	"\tManagerId\x18\x05 \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\x06 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\a \x01(\tR\x02Id\"\xc7\a\n" +
	"\x1fDraftActionLogIntegratedCommand\x12\x1e\n" +
	"\n" +
	"TrackingId\x18\x01 \x01(\tR\n" +
	"TrackingId\x12\x1e\n" +
	"\n" +
	"IsOutgoing\x18\x02 \x01(\bR\n" +
	"IsOutgoing\x12B\n" +
	"\x10DraftOrderNumber\x18\x03 \x01(\v2\x16.ActionLog.LogMetadataR\x10DraftOrderNumber\x12.\n" +
	"\x06Branch\x18\x04 \x01(\v2\x16.ActionLog.LogMetadataR\x06Branch\x12>\n" +
	"\x0eSenderFullName\x18\x05 \x01(\v2\x16.ActionLog.LogMetadataR\x0eSenderFullName\x12B\n" +
	"\x10ReceiverFullName\x18\x06 \x01(\v2\x16.ActionLog.LogMetadataR\x10ReceiverFullName\x12-\n" +
	"\n" +
	"DraftMoney\x18\a \x01(\v2\r.Common.MoneyR\n" +
	"DraftMoney\x123\n" +
	"\rReceivedMoney\x18\b \x01(\v2\r.Common.MoneyR\rReceivedMoney\x12?\n" +
	"\x0fDraftCommission\x18\t \x01(\v2\x15.Common.MoneyDocumentR\x0fDraftCommission\x12A\n" +
	"\x10BranchCommission\x18\n" +
	" \x01(\v2\x15.Common.MoneyDocumentR\x10BranchCommission\x12:\n" +
	"\fOppositeSide\x18\v \x01(\v2\x16.ActionLog.LogMetadataR\fOppositeSide\x128\n" +
	"\vDescription\x18\f \x01(\v2\x16.ActionLog.LogMetadataR\vDescription\x124\n" +
	"\n" +
	"ActionType\x18\r \x01(\x0e2\x14.ActionLog.DraftTypeR\n" +
	"ActionType\x12,\n" +
	"\aLogType\x18\x0e \x01(\x0e2\x12.ActionLog.LogTypeR\aLogType\x12$\n" +
	"\rUserSubjectId\x18\x0f \x01(\tR\rUserSubjectId\x12\x1c\n" +
	"\tIsPrivate\x18\x10 \x01(\bR\tIsPrivate\x12\x12\n" +
	"\x04Rate\x18\x11 \x01(\tR\x04Rate\x12\x1c\n" +
	"\tManagerId\x18\x12 \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\x13 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x14 \x01(\tR\x02Id\"\xfd\x01\n" +
	"#ImportExcelFileLogIntegratedCommand\x12.\n" +
	"\x06BankId\x18\x01 \x01(\v2\x16.ActionLog.LogMetadataR\x06BankId\x12$\n" +
	"\rUserSubjectId\x18\x02 \x01(\tR\rUserSubjectId\x12,\n" +
	"\aLogType\x18\x03 \x01(\x0e2\x12.ActionLog.LogTypeR\aLogType\x12\x1c\n" +
	"\tManagerId\x18\x04 \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\x05 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\x06 \x01(\tR\x02Id\"\x84\x03\n" +
	"\x1cPayOrderLogIntegratedCommand\x12<\n" +
	"\rFromAccountId\x18\x01 \x01(\v2\x16.ActionLog.LogMetadataR\rFromAccountId\x128\n" +
	"\vToAccountId\x18\x02 \x01(\v2\x16.ActionLog.LogMetadataR\vToAccountId\x12D\n" +
	"\x11PayOrderReceiptId\x18\x03 \x01(\v2\x16.ActionLog.LogMetadataR\x11PayOrderReceiptId\x12$\n" +
	"\rUserSubjectId\x18\x04 \x01(\tR\rUserSubjectId\x12,\n" +
	"\aLogType\x18\x05 \x01(\x0e2\x12.ActionLog.LogTypeR\aLogType\x12\x1c\n" +
	"\tManagerId\x18\x06 \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\a \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\b \x01(\tR\x02Id\"\xd5\x03\n" +
	"&PaymentOrderActionLogIntegratedCommand\x12\x1e\n" +
	"\n" +
	"TrackingId\x18\x01 \x01(\tR\n" +
	"TrackingId\x128\n" +
	"\vFromAccount\x18\x02 \x01(\v2\x16.ActionLog.LogMetadataR\vFromAccount\x12.\n" +
	"\x06Amount\x18\x03 \x01(\v2\x16.ActionLog.LogMetadataR\x06Amount\x122\n" +
	"\bCurrency\x18\x04 \x01(\v2\x16.ActionLog.LogMetadataR\bCurrency\x12E\n" +
	"\rOpponentInfos\x18\x05 \x03(\v2\x1f.ActionLog.EnrollingAccountInfoR\rOpponentInfos\x12,\n" +
	"\aLogType\x18\x06 \x01(\x0e2\x12.ActionLog.LogTypeR\aLogType\x12$\n" +
	"\rUserSubjectId\x18\a \x01(\tR\rUserSubjectId\x12\x1c\n" +
	"\tManagerId\x18\b \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\t \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\n" +
	" \x01(\tR\x02Id\"\x87\x01\n" +
	"\x14EnrollingAccountInfo\x124\n" +
	"\tAccountId\x18\x01 \x01(\v2\x16.ActionLog.LogMetadataR\tAccountId\x129\n" +
	"\x10TransactionMoney\x18\x02 \x01(\v2\r.Common.MoneyR\x10TransactionMoney\"\xd1\x03\n" +
	"*UnknownBankTransactionLogIntegratedCommand\x12\x1e\n" +
	"\n" +
	"TrackingId\x18\x01 \x01(\tR\n" +
	"TrackingId\x12.\n" +
	"\x06BankId\x18\x02 \x01(\v2\x16.ActionLog.LogMetadataR\x06BankId\x12D\n" +
	"\x11TransactionNumber\x18\x03 \x01(\v2\x16.ActionLog.LogMetadataR\x11TransactionNumber\x12,\n" +
	"\aLogType\x18\x04 \x01(\x0e2\x12.ActionLog.LogTypeR\aLogType\x12$\n" +
	"\rUserSubjectId\x18\x05 \x01(\tR\rUserSubjectId\x12\x1c\n" +
	"\tManagerId\x18\x06 \x01(\tR\tManagerId\x12\x1e\n" +
	"\n" +
	"IsWithdraw\x18\a \x01(\bR\n" +
	"IsWithdraw\x12#\n" +
	"\x05Money\x18\b \x01(\v2\r.Common.MoneyR\x05Money\x12 \n" +
	"\vDescription\x18\t \x01(\tR\vDescription\x12$\n" +
	"\rCorrelationId\x18\n" +
	" \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\v \x01(\tR\x02Id\"\x9c\x03\n" +
	"(AddIncomingPendDraftLogIntegratedCommand\x12\x1e\n" +
	"\n" +
	"TrackingId\x18\x01 \x01(\tR\n" +
	"TrackingId\x122\n" +
	"\bBranchId\x18\x02 \x01(\v2\x16.ActionLog.LogMetadataR\bBranchId\x12,\n" +
	"\aLogType\x18\x03 \x01(\x0e2\x12.ActionLog.LogTypeR\aLogType\x12$\n" +
	"\rUserSubjectId\x18\x04 \x01(\tR\rUserSubjectId\x128\n" +
	"\vDraftNumber\x18\x05 \x01(\v2\x16.ActionLog.LogMetadataR\vDraftNumber\x12\x16\n" +
	"\x06Amount\x18\x06 \x01(\x01R\x06Amount\x12\"\n" +
	"\fCurrencyCode\x18\a \x01(\tR\fCurrencyCode\x12\x1c\n" +
	"\tManagerId\x18\b \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\t \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\n" +
	" \x01(\tR\x02Id\"\x99\x03\n" +
	"+RemovePendIncomingDraftLogIntegratedCommand\x12\x18\n" +
	"\aDraftId\x18\x01 \x01(\tR\aDraftId\x122\n" +
	"\bBranchId\x18\x02 \x01(\v2\x16.ActionLog.LogMetadataR\bBranchId\x128\n" +
	"\vDraftNumber\x18\x03 \x01(\v2\x16.ActionLog.LogMetadataR\vDraftNumber\x12$\n" +
	"\rUserSubjectId\x18\x04 \x01(\tR\rUserSubjectId\x12,\n" +
	"\aLogType\x18\x05 \x01(\x0e2\x12.ActionLog.LogTypeR\aLogType\x12\x16\n" +
	"\x06Amount\x18\x06 \x01(\x01R\x06Amount\x12\"\n" +
	"\fCurrencyCode\x18\a \x01(\tR\fCurrencyCode\x12\x1c\n" +
	"\tManagerId\x18\b \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\t \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\n" +
	" \x01(\tR\x02Id\"\x9f\x02\n" +
	"3RemoveAccountingCheckoutActionLogsIntegratedCommand\x12\x1e\n" +
	"\n" +
	"TrackingId\x18\x01 \x01(\tR\n" +
	"TrackingId\x12 \n" +
	"\vAccountName\x18\x02 \x01(\tR\vAccountName\x12,\n" +
	"\aLogType\x18\x03 \x01(\x0e2\x12.ActionLog.LogTypeR\aLogType\x12$\n" +
	"\rUserSubjectId\x18\x04 \x01(\tR\rUserSubjectId\x12\x1c\n" +
	"\tManagerId\x18\x05 \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\x06 \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\a \x01(\tR\x02Id\"t\n" +
	"\x1cCheckoutStatusIntegratedItem\x12\"\n" +
	"\fCurrencyCode\x18\x01 \x01(\tR\fCurrencyCode\x12\x18\n" +
	"\aBalance\x18\x02 \x01(\x01R\aBalance\x12\x16\n" +
	"\x06IsDebt\x18\x03 \x01(\bR\x06IsDebt\"\xac\x03\n" +
	">AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand\x12\x1e\n" +
	"\n" +
	"TrackingId\x18\x01 \x01(\tR\n" +
	"TrackingId\x12C\n" +
	"\bStatuses\x18\x02 \x03(\v2'.ActionLog.CheckoutStatusIntegratedItemR\bStatuses\x12;\n" +
	"\rInitialMonies\x18\x03 \x03(\v2\x15.Common.MoneyDocumentR\rInitialMonies\x12 \n" +
	"\vAccountName\x18\x04 \x01(\tR\vAccountName\x12,\n" +
	"\aLogType\x18\x05 \x01(\x0e2\x12.ActionLog.LogTypeR\aLogType\x12$\n" +
	"\rUserSubjectId\x18\x06 \x01(\tR\rUserSubjectId\x12\x1c\n" +
	"\tManagerId\x18\a \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\b \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\t \x01(\tR\x02Id\"\xe7\x02\n" +
	"6AddAccountingCheckoutByDateActionLogsIntegratedCommand\x12\x1e\n" +
	"\n" +
	"TrackingId\x18\x01 \x01(\tR\n" +
	"TrackingId\x12C\n" +
	"\bStatuses\x18\x02 \x03(\v2'.ActionLog.CheckoutStatusIntegratedItemR\bStatuses\x12 \n" +
	"\vAccountName\x18\x03 \x01(\tR\vAccountName\x12,\n" +
	"\aLogType\x18\x04 \x01(\x0e2\x12.ActionLog.LogTypeR\aLogType\x12$\n" +
	"\rUserSubjectId\x18\x05 \x01(\tR\rUserSubjectId\x12\x1c\n" +
	"\tManagerId\x18\x06 \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\a \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\b \x01(\tR\x02Id\"\x86\x03\n" +
	"7AddAccountingCheckoutByIndexActionLogsIntegratedCommand\x12\x1e\n" +
	"\n" +
	"TrackingId\x18\x01 \x01(\tR\n" +
	"TrackingId\x12C\n" +
	"\bStatuses\x18\x02 \x03(\v2'.ActionLog.CheckoutStatusIntegratedItemR\bStatuses\x12 \n" +
	"\vAccountName\x18\x03 \x01(\tR\vAccountName\x12,\n" +
	"\aLogType\x18\x04 \x01(\x0e2\x12.ActionLog.LogTypeR\aLogType\x12\x1c\n" +
	"\tRowNumber\x18\x05 \x01(\x05R\tRowNumber\x12$\n" +
	"\rUserSubjectId\x18\x06 \x01(\tR\rUserSubjectId\x12\x1c\n" +
	"\tManagerId\x18\a \x01(\tR\tManagerId\x12$\n" +
	"\rCorrelationId\x18\b \x01(\tR\rCorrelationId\x12\x0e\n" +
	"\x02Id\x18\t \x01(\tR\x02Id\"G\n" +
	"\vLogMetadata\x12\x14\n" +
	"\x05Value\x18\x01 \x01(\tR\x05Value\x12\"\n" +
	"\fMetadataType\x18\x02 \x01(\x05R\fMetadataType*t\n" +
	"\x10ChequeStatusEnum\x12\x1a\n" +
	"\x16SavedToCustomerAccount\x10\x00\x12 \n" +
	"\x1cSavedToCashDeskOrBankAccount\x10\x01\x12\x0f\n" +
	"\vHasReturned\x10\x02\x12\x11\n" +
	"\rCashedToMoney\x10\x03*$\n" +
	"\tDraftType\x12\t\n" +
	"\x05Draft\x10\x00\x12\f\n" +
	"\bExecuted\x10\x01*-\n" +
	"\aLogType\x12\n" +
	"\n" +
	"\x06Create\x10\x00\x12\n" +
	"\n" +
	"\x06Update\x10\x01\x12\n" +
	"\n" +
	"\x06Delete\x10\x02BTZ-moneyx.golang.framework/integration/ActionLog\xaa\x02\"Ariyana.Framework.Schema.ActionLogb\x06proto3"

var (
	file_ActionLog_proto_rawDescOnce sync.Once
	file_ActionLog_proto_rawDescData []byte
)

func file_ActionLog_proto_rawDescGZIP() []byte {
	file_ActionLog_proto_rawDescOnce.Do(func() {
		file_ActionLog_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ActionLog_proto_rawDesc), len(file_ActionLog_proto_rawDesc)))
	})
	return file_ActionLog_proto_rawDescData
}

var file_ActionLog_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ActionLog_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_ActionLog_proto_goTypes = []any{
	(ChequeStatusEnum)(0), // 0: ActionLog.ChequeStatusEnum
	(DraftType)(0),        // 1: ActionLog.DraftType
	(LogType)(0),          // 2: ActionLog.LogType
	(*AccountActionLogIntegratedCommand)(nil),                              // 3: ActionLog.AccountActionLogIntegratedCommand
	(*BankActionLogIntegratedCommand)(nil),                                 // 4: ActionLog.BankActionLogIntegratedCommand
	(*ChangeBankTransactionLogIntegratedCommand)(nil),                      // 5: ActionLog.ChangeBankTransactionLogIntegratedCommand
	(*BranchActionLogIntegratedCommand)(nil),                               // 6: ActionLog.BranchActionLogIntegratedCommand
	(*BuySellCurrencyLogIntegratedCommand)(nil),                            // 7: ActionLog.BuySellCurrencyLogIntegratedCommand
	(*CashTransactionLogIntegratedCommand)(nil),                            // 8: ActionLog.CashTransactionLogIntegratedCommand
	(*ChangeDraftLogIntegratedCommand)(nil),                                // 9: ActionLog.ChangeDraftLogIntegratedCommand
	(*ChangeRateDraftActionLogIntegratedCommand)(nil),                      // 10: ActionLog.ChangeRateDraftActionLogIntegratedCommand
	(*ChequeTransactionIntegratedCommand)(nil),                             // 11: ActionLog.ChequeTransactionIntegratedCommand
	(*CompanyActionLogIntegratedCommand)(nil),                              // 12: ActionLog.CompanyActionLogIntegratedCommand
	(*CurrencyActionLogIntegratedCommand)(nil),                             // 13: ActionLog.CurrencyActionLogIntegratedCommand
	(*CustomerAccountsTransactionLogIntegratedCommand)(nil),                // 14: ActionLog.CustomerAccountsTransactionLogIntegratedCommand
	(*CustomerActionLogIntegratedCommand)(nil),                             // 15: ActionLog.CustomerActionLogIntegratedCommand
	(*DraftActionLogIntegratedCommand)(nil),                                // 16: ActionLog.DraftActionLogIntegratedCommand
	(*ImportExcelFileLogIntegratedCommand)(nil),                            // 17: ActionLog.ImportExcelFileLogIntegratedCommand
	(*PayOrderLogIntegratedCommand)(nil),                                   // 18: ActionLog.PayOrderLogIntegratedCommand
	(*PaymentOrderActionLogIntegratedCommand)(nil),                         // 19: ActionLog.PaymentOrderActionLogIntegratedCommand
	(*EnrollingAccountInfo)(nil),                                           // 20: ActionLog.EnrollingAccountInfo
	(*UnknownBankTransactionLogIntegratedCommand)(nil),                     // 21: ActionLog.UnknownBankTransactionLogIntegratedCommand
	(*AddIncomingPendDraftLogIntegratedCommand)(nil),                       // 22: ActionLog.AddIncomingPendDraftLogIntegratedCommand
	(*RemovePendIncomingDraftLogIntegratedCommand)(nil),                    // 23: ActionLog.RemovePendIncomingDraftLogIntegratedCommand
	(*RemoveAccountingCheckoutActionLogsIntegratedCommand)(nil),            // 24: ActionLog.RemoveAccountingCheckoutActionLogsIntegratedCommand
	(*CheckoutStatusIntegratedItem)(nil),                                   // 25: ActionLog.CheckoutStatusIntegratedItem
	(*AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand)(nil), // 26: ActionLog.AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand
	(*AddAccountingCheckoutByDateActionLogsIntegratedCommand)(nil),         // 27: ActionLog.AddAccountingCheckoutByDateActionLogsIntegratedCommand
	(*AddAccountingCheckoutByIndexActionLogsIntegratedCommand)(nil),        // 28: ActionLog.AddAccountingCheckoutByIndexActionLogsIntegratedCommand
	(*LogMetadata)(nil),                                                    // 29: ActionLog.LogMetadata
	(*common.AccountingInfo)(nil),                                          // 30: Common.AccountingInfo
	(*common.NullableBool)(nil),                                            // 31: Common.NullableBool
	(*common.Money)(nil),                                                   // 32: Common.Money
	(*common.MoneyDocument)(nil),                                           // 33: Common.MoneyDocument
}
var file_ActionLog_proto_depIdxs = []int32{
	29,  // 0: ActionLog.AccountActionLogIntegratedCommand.AccountName:type_name -> ActionLog.LogMetadata
	29,  // 1: ActionLog.BankActionLogIntegratedCommand.BankName:type_name -> ActionLog.LogMetadata
	29,  // 2: ActionLog.BankActionLogIntegratedCommand.Currency:type_name -> ActionLog.LogMetadata
	29,  // 3: ActionLog.BankActionLogIntegratedCommand.CardNumber:type_name -> ActionLog.LogMetadata
	30,  // 4: ActionLog.ChangeBankTransactionLogIntegratedCommand.OpponentInfoes:type_name -> Common.AccountingInfo
	29,  // 5: ActionLog.ChangeBankTransactionLogIntegratedCommand.BankAccountName:type_name -> ActionLog.LogMetadata
	29,  // 6: ActionLog.ChangeBankTransactionLogIntegratedCommand.Description:type_name -> ActionLog.LogMetadata
	2,   // 7: ActionLog.ChangeBankTransactionLogIntegratedCommand.LogType:type_name -> ActionLog.LogType
	31,  // 8: ActionLog.ChangeBankTransactionLogIntegratedCommand.IsWithdraw:type_name -> Common.NullableBool
	29,  // 9: ActionLog.BranchActionLogIntegratedCommand.BranchName:type_name -> ActionLog.LogMetadata
	29,  // 10: ActionLog.BranchActionLogIntegratedCommand.Currency:type_name -> ActionLog.LogMetadata
	29,  // 11: ActionLog.BranchActionLogIntegratedCommand.CustomerName:type_name -> ActionLog.LogMetadata
	2,   // 12: ActionLog.BranchActionLogIntegratedCommand.LogType:type_name -> ActionLog.LogType
	32,  // 13: ActionLog.BuySellCurrencyLogIntegratedCommand.BuyerMoney:type_name -> Common.Money
	33,  // 14: ActionLog.BuySellCurrencyLogIntegratedCommand.BuyerCommission:type_name -> Common.MoneyDocument
	29,  // 15: ActionLog.BuySellCurrencyLogIntegratedCommand.BuyerFullName:type_name -> ActionLog.LogMetadata
	29,  // 16: ActionLog.BuySellCurrencyLogIntegratedCommand.SellerFullName:type_name -> ActionLog.LogMetadata
	32,  // 17: ActionLog.BuySellCurrencyLogIntegratedCommand.SellerMoney:type_name -> Common.Money
	33,  // 18: ActionLog.BuySellCurrencyLogIntegratedCommand.SellerCommission:type_name -> Common.MoneyDocument
	29,  // 19: ActionLog.BuySellCurrencyLogIntegratedCommand.Rate:type_name -> ActionLog.LogMetadata
	2,   // 20: ActionLog.BuySellCurrencyLogIntegratedCommand.LogType:type_name -> ActionLog.LogType
	29,  // 21: ActionLog.CashTransactionLogIntegratedCommand.OppositeAccountFullName:type_name -> ActionLog.LogMetadata
	29,  // 22: ActionLog.CashTransactionLogIntegratedCommand.Description:type_name -> ActionLog.LogMetadata
	2,   // 23: ActionLog.CashTransactionLogIntegratedCommand.LogType:type_name -> ActionLog.LogType
	32,  // 24: ActionLog.CashTransactionLogIntegratedCommand.Money:type_name -> Common.Money
	32,  // 25: ActionLog.CashTransactionLogIntegratedCommand.CommissionMoney:type_name -> Common.Money
	29,  // 26: ActionLog.ChangeDraftLogIntegratedCommand.DraftOrderNumber:type_name -> ActionLog.LogMetadata
	29,  // 27: ActionLog.ChangeDraftLogIntegratedCommand.Branch:type_name -> ActionLog.LogMetadata
	29,  // 28: ActionLog.ChangeDraftLogIntegratedCommand.Amount:type_name -> ActionLog.LogMetadata
	29,  // 29: ActionLog.ChangeDraftLogIntegratedCommand.Currency:type_name -> ActionLog.LogMetadata
	29,  // 30: ActionLog.ChangeDraftLogIntegratedCommand.OldRate:type_name -> ActionLog.LogMetadata
	29,  // 31: ActionLog.ChangeDraftLogIntegratedCommand.NewRate:type_name -> ActionLog.LogMetadata
	29,  // 32: ActionLog.ChangeDraftLogIntegratedCommand.RateCurrency:type_name -> ActionLog.LogMetadata
	29,  // 33: ActionLog.ChangeDraftLogIntegratedCommand.CommissionAmount:type_name -> ActionLog.LogMetadata
	29,  // 34: ActionLog.ChangeDraftLogIntegratedCommand.CommissionCurrency:type_name -> ActionLog.LogMetadata
	2,   // 35: ActionLog.ChangeDraftLogIntegratedCommand.LogType:type_name -> ActionLog.LogType
	29,  // 36: ActionLog.ChangeRateDraftActionLogIntegratedCommand.Branch:type_name -> ActionLog.LogMetadata
	32,  // 37: ActionLog.ChangeRateDraftActionLogIntegratedCommand.DraftMoney:type_name -> Common.Money
	32,  // 38: ActionLog.ChangeRateDraftActionLogIntegratedCommand.EquivalentMoney:type_name -> Common.Money
	33,  // 39: ActionLog.ChangeRateDraftActionLogIntegratedCommand.DraftCommission:type_name -> Common.MoneyDocument
	29,  // 40: ActionLog.ChequeTransactionIntegratedCommand.BankName:type_name -> ActionLog.LogMetadata
	29,  // 41: ActionLog.ChequeTransactionIntegratedCommand.DocumentNumber:type_name -> ActionLog.LogMetadata
	29,  // 42: ActionLog.ChequeTransactionIntegratedCommand.Amount:type_name -> ActionLog.LogMetadata
	29,  // 43: ActionLog.ChequeTransactionIntegratedCommand.CurrencyCode:type_name -> ActionLog.LogMetadata
	29,  // 44: ActionLog.ChequeTransactionIntegratedCommand.DocDate:type_name -> ActionLog.LogMetadata
	29,  // 45: ActionLog.ChequeTransactionIntegratedCommand.AccountTitle:type_name -> ActionLog.LogMetadata
	29,  // 46: ActionLog.ChequeTransactionIntegratedCommand.Opposite:type_name -> ActionLog.LogMetadata
	29,  // 47: ActionLog.ChequeTransactionIntegratedCommand.Description:type_name -> ActionLog.LogMetadata
	0,   // 48: ActionLog.ChequeTransactionIntegratedCommand.ChequeStatus:type_name -> ActionLog.ChequeStatusEnum
	2,   // 49: ActionLog.ChequeTransactionIntegratedCommand.LogType:type_name -> ActionLog.LogType
	33,  // 50: ActionLog.ChequeTransactionIntegratedCommand.AssignorCommission:type_name -> Common.MoneyDocument
	33,  // 51: ActionLog.ChequeTransactionIntegratedCommand.ReceiverCommission:type_name -> Common.MoneyDocument
	29,  // 52: ActionLog.CompanyActionLogIntegratedCommand.CompanyName:type_name -> ActionLog.LogMetadata
	2,   // 53: ActionLog.CompanyActionLogIntegratedCommand.LogType:type_name -> ActionLog.LogType
	29,  // 54: ActionLog.CurrencyActionLogIntegratedCommand.Currency:type_name -> ActionLog.LogMetadata
	29,  // 55: ActionLog.CurrencyActionLogIntegratedCommand.Rate:type_name -> ActionLog.LogMetadata
	2,   // 56: ActionLog.CurrencyActionLogIntegratedCommand.LogType:type_name -> ActionLog.LogType
	29,  // 57: ActionLog.CustomerAccountsTransactionLogIntegratedCommand.FromAccountFullName:type_name -> ActionLog.LogMetadata
	32,  // 58: ActionLog.CustomerAccountsTransactionLogIntegratedCommand.FromCommission:type_name -> Common.Money
	29,  // 59: ActionLog.CustomerAccountsTransactionLogIntegratedCommand.ToAccountFullName:type_name -> ActionLog.LogMetadata
	32,  // 60: ActionLog.CustomerAccountsTransactionLogIntegratedCommand.ToCommission:type_name -> Common.Money
	32,  // 61: ActionLog.CustomerAccountsTransactionLogIntegratedCommand.Money:type_name -> Common.Money
	29,  // 62: ActionLog.CustomerAccountsTransactionLogIntegratedCommand.Description:type_name -> ActionLog.LogMetadata
	2,   // 63: ActionLog.CustomerAccountsTransactionLogIntegratedCommand.LogType:type_name -> ActionLog.LogType
	29,  // 64: ActionLog.CustomerActionLogIntegratedCommand.CustomerName:type_name -> ActionLog.LogMetadata
	2,   // 65: ActionLog.CustomerActionLogIntegratedCommand.LogType:type_name -> ActionLog.LogType
	29,  // 66: ActionLog.DraftActionLogIntegratedCommand.DraftOrderNumber:type_name -> ActionLog.LogMetadata
	29,  // 67: ActionLog.DraftActionLogIntegratedCommand.Branch:type_name -> ActionLog.LogMetadata
	29,  // 68: ActionLog.DraftActionLogIntegratedCommand.SenderFullName:type_name -> ActionLog.LogMetadata
	29,  // 69: ActionLog.DraftActionLogIntegratedCommand.ReceiverFullName:type_name -> ActionLog.LogMetadata
	32,  // 70: ActionLog.DraftActionLogIntegratedCommand.DraftMoney:type_name -> Common.Money
	32,  // 71: ActionLog.DraftActionLogIntegratedCommand.ReceivedMoney:type_name -> Common.Money
	33,  // 72: ActionLog.DraftActionLogIntegratedCommand.DraftCommission:type_name -> Common.MoneyDocument
	33,  // 73: ActionLog.DraftActionLogIntegratedCommand.BranchCommission:type_name -> Common.MoneyDocument
	29,  // 74: ActionLog.DraftActionLogIntegratedCommand.OppositeSide:type_name -> ActionLog.LogMetadata
	29,  // 75: ActionLog.DraftActionLogIntegratedCommand.Description:type_name -> ActionLog.LogMetadata
	1,   // 76: ActionLog.DraftActionLogIntegratedCommand.ActionType:type_name -> ActionLog.DraftType
	2,   // 77: ActionLog.DraftActionLogIntegratedCommand.LogType:type_name -> ActionLog.LogType
	29,  // 78: ActionLog.ImportExcelFileLogIntegratedCommand.BankId:type_name -> ActionLog.LogMetadata
	2,   // 79: ActionLog.ImportExcelFileLogIntegratedCommand.LogType:type_name -> ActionLog.LogType
	29,  // 80: ActionLog.PayOrderLogIntegratedCommand.FromAccountId:type_name -> ActionLog.LogMetadata
	29,  // 81: ActionLog.PayOrderLogIntegratedCommand.ToAccountId:type_name -> ActionLog.LogMetadata
	29,  // 82: ActionLog.PayOrderLogIntegratedCommand.PayOrderReceiptId:type_name -> ActionLog.LogMetadata
	2,   // 83: ActionLog.PayOrderLogIntegratedCommand.LogType:type_name -> ActionLog.LogType
	29,  // 84: ActionLog.PaymentOrderActionLogIntegratedCommand.FromAccount:type_name -> ActionLog.LogMetadata
	29,  // 85: ActionLog.PaymentOrderActionLogIntegratedCommand.Amount:type_name -> ActionLog.LogMetadata
	29,  // 86: ActionLog.PaymentOrderActionLogIntegratedCommand.Currency:type_name -> ActionLog.LogMetadata
	20,  // 87: ActionLog.PaymentOrderActionLogIntegratedCommand.OpponentInfos:type_name -> ActionLog.EnrollingAccountInfo
	2,   // 88: ActionLog.PaymentOrderActionLogIntegratedCommand.LogType:type_name -> ActionLog.LogType
	29,  // 89: ActionLog.EnrollingAccountInfo.AccountId:type_name -> ActionLog.LogMetadata
	32,  // 90: ActionLog.EnrollingAccountInfo.TransactionMoney:type_name -> Common.Money
	29,  // 91: ActionLog.UnknownBankTransactionLogIntegratedCommand.BankId:type_name -> ActionLog.LogMetadata
	29,  // 92: ActionLog.UnknownBankTransactionLogIntegratedCommand.TransactionNumber:type_name -> ActionLog.LogMetadata
	2,   // 93: ActionLog.UnknownBankTransactionLogIntegratedCommand.LogType:type_name -> ActionLog.LogType
	32,  // 94: ActionLog.UnknownBankTransactionLogIntegratedCommand.Money:type_name -> Common.Money
	29,  // 95: ActionLog.AddIncomingPendDraftLogIntegratedCommand.BranchId:type_name -> ActionLog.LogMetadata
	2,   // 96: ActionLog.AddIncomingPendDraftLogIntegratedCommand.LogType:type_name -> ActionLog.LogType
	29,  // 97: ActionLog.AddIncomingPendDraftLogIntegratedCommand.DraftNumber:type_name -> ActionLog.LogMetadata
	29,  // 98: ActionLog.RemovePendIncomingDraftLogIntegratedCommand.BranchId:type_name -> ActionLog.LogMetadata
	29,  // 99: ActionLog.RemovePendIncomingDraftLogIntegratedCommand.DraftNumber:type_name -> ActionLog.LogMetadata
	2,   // 100: ActionLog.RemovePendIncomingDraftLogIntegratedCommand.LogType:type_name -> ActionLog.LogType
	2,   // 101: ActionLog.RemoveAccountingCheckoutActionLogsIntegratedCommand.LogType:type_name -> ActionLog.LogType
	25,  // 102: ActionLog.AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand.Statuses:type_name -> ActionLog.CheckoutStatusIntegratedItem
	33,  // 103: ActionLog.AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand.InitialMonies:type_name -> Common.MoneyDocument
	2,   // 104: ActionLog.AddAccountingCheckoutByInitialMoniesActionLogIntegratedCommand.LogType:type_name -> ActionLog.LogType
	25,  // 105: ActionLog.AddAccountingCheckoutByDateActionLogsIntegratedCommand.Statuses:type_name -> ActionLog.CheckoutStatusIntegratedItem
	2,   // 106: ActionLog.AddAccountingCheckoutByDateActionLogsIntegratedCommand.LogType:type_name -> ActionLog.LogType
	25,  // 107: ActionLog.AddAccountingCheckoutByIndexActionLogsIntegratedCommand.Statuses:type_name -> ActionLog.CheckoutStatusIntegratedItem
	2,   // 108: ActionLog.AddAccountingCheckoutByIndexActionLogsIntegratedCommand.LogType:type_name -> ActionLog.LogType
	109, // [109:109] is the sub-list for method output_type
	109, // [109:109] is the sub-list for method input_type
	109, // [109:109] is the sub-list for extension type_name
	109, // [109:109] is the sub-list for extension extendee
	0,   // [0:109] is the sub-list for field type_name
}

func init() { file_ActionLog_proto_init() }
func file_ActionLog_proto_init() {
	if File_ActionLog_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ActionLog_proto_rawDesc), len(file_ActionLog_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ActionLog_proto_goTypes,
		DependencyIndexes: file_ActionLog_proto_depIdxs,
		EnumInfos:         file_ActionLog_proto_enumTypes,
		MessageInfos:      file_ActionLog_proto_msgTypes,
	}.Build()
	File_ActionLog_proto = out.File
	file_ActionLog_proto_goTypes = nil
	file_ActionLog_proto_depIdxs = nil
}
