// Code generated by gofr.dev/cli/gofr. DO NOT EDIT.
// versions:
// 	gofr-cli v0.7.0
// 	gofr.dev v1.39.0
// 	source: wa.proto

package proto

import (
	"context"
	"errors"
	
	"gofr.dev/pkg/gofr"
	"gofr.dev/pkg/gofr/container"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	MoneyxErrors "moneyx.golang.framework/moneyxerrors"
	Validator "moneyx.golang.framework/validator"
	
	healthpb "google.golang.org/grpc/health/grpc_health_v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	framework "moneyx.golang.framework/proto/ariyana/framework"
)

// NewWhatsappServiceGoFrServer creates a new instance of WhatsappServiceGoFrServer
func NewWhatsappServiceGoFrServer() *WhatsappServiceGoFrServer {
	return &WhatsappServiceGoFrServer{
		health: getOrCreateHealthServer(), // Initialize the health server
	}
}

// NewWhatsappServiceGoFrValidation creates a new instance of WhatsappServiceGoFrValidation
func NewWhatsappServiceGoFrValidation() *WhatsappServiceGoFrValidation {
	return &WhatsappServiceGoFrValidation{}
}

// WhatsappServiceServerWithGofr is the interface for the server implementation
type WhatsappServiceServerWithGofr interface {
	CheckUserState(*gofr.Context) (any, error)
	Initialize(*gofr.Context) (any, error)
	SendMessage(*gofr.Context) (any, error)
	SayHello(*gofr.Context) (any, error)
	SignOut(*gofr.Context) (any, error)
}

// WhatsappServiceValidationWithGofr is the interface for the validation implementation
type WhatsappServiceValidationWithGofr interface {
	CheckUserState(*Validator.EntryValidator[*EmptyWrapper])
	Initialize(*Validator.EntryValidator[*EmptyWrapper])
	SendMessage(*Validator.EntryValidator[*SendMessageCommandProtoWrapper])
	SayHello(*Validator.EntryValidator[*EmptyWrapper])
	SignOut(*Validator.EntryValidator[*StringIdArgWrapper])
}

// WhatsappServiceServerWrapper wraps the server and handles request and response logic
type WhatsappServiceServerWrapper struct {
	WhatsappServiceServer
	*healthServer
	Container *container.Container
	server    WhatsappServiceServerWithGofr
	validator WhatsappServiceValidationWithGofr
}




// Unary method handler for CheckUserState
func (h *WhatsappServiceServerWrapper) CheckUserState(ctx context.Context, req *emptypb.Empty) (*StatusQueryProto, error) {
	wrapper := &EmptyWrapper{ctx: ctx, Empty: req}
	gctx := h.getGofrContext(ctx, wrapper)
	
	entryValidator := Validator.NewEntryValidator[*EmptyWrapper](wrapper)
	h.validator.CheckUserState(entryValidator)
	var err error
	err = entryValidator.Validate()
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, err.Error())
	}
	res, err := h.server.CheckUserState(gctx)
	if err != nil {
		return nil, getStatusCodeError(err)
	}

	resp, ok := res.(*StatusQueryProto)
	if !ok {
		return nil, status.Errorf(codes.Unknown, "unexpected response type %T", res)
	}
	
	return resp, nil
}
// Unary method handler for Initialize
func (h *WhatsappServiceServerWrapper) Initialize(ctx context.Context, req *emptypb.Empty) (*InitializeQueryProto, error) {
	wrapper := &EmptyWrapper{ctx: ctx, Empty: req}
	gctx := h.getGofrContext(ctx, wrapper)
	
	entryValidator := Validator.NewEntryValidator[*EmptyWrapper](wrapper)
	h.validator.Initialize(entryValidator)
	var err error
	err = entryValidator.Validate()
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, err.Error())
	}
	res, err := h.server.Initialize(gctx)
	if err != nil {
		return nil, getStatusCodeError(err)
	}

	resp, ok := res.(*InitializeQueryProto)
	if !ok {
		return nil, status.Errorf(codes.Unknown, "unexpected response type %T", res)
	}
	
	return resp, nil
}
// Unary method handler for SendMessage
func (h *WhatsappServiceServerWrapper) SendMessage(ctx context.Context, req *SendMessageCommandProto) (*SendMessageResultProto, error) {
	wrapper := &SendMessageCommandProtoWrapper{ctx: ctx, SendMessageCommandProto: req}
	gctx := h.getGofrContext(ctx, wrapper)
	
	entryValidator := Validator.NewEntryValidator[*SendMessageCommandProtoWrapper](wrapper)
	h.validator.SendMessage(entryValidator)
	var err error
	err = entryValidator.Validate()
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, err.Error())
	}
	res, err := h.server.SendMessage(gctx)
	if err != nil {
		return nil, getStatusCodeError(err)
	}

	resp, ok := res.(*SendMessageResultProto)
	if !ok {
		return nil, status.Errorf(codes.Unknown, "unexpected response type %T", res)
	}
	
	return resp, nil
}
// Unary method handler for SayHello
func (h *WhatsappServiceServerWrapper) SayHello(ctx context.Context, req *emptypb.Empty) (*GreetingResponse, error) {
	wrapper := &EmptyWrapper{ctx: ctx, Empty: req}
	gctx := h.getGofrContext(ctx, wrapper)
	
	entryValidator := Validator.NewEntryValidator[*EmptyWrapper](wrapper)
	h.validator.SayHello(entryValidator)
	var err error
	err = entryValidator.Validate()
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, err.Error())
	}
	res, err := h.server.SayHello(gctx)
	if err != nil {
		return nil, getStatusCodeError(err)
	}

	resp, ok := res.(*GreetingResponse)
	if !ok {
		return nil, status.Errorf(codes.Unknown, "unexpected response type %T", res)
	}
	
	return resp, nil
}
// Unary method handler for SignOut
func (h *WhatsappServiceServerWrapper) SignOut(ctx context.Context, req *framework.StringIdArg) (*StatusQueryProto, error) {
	wrapper := &StringIdArgWrapper{ctx: ctx, StringIdArg: req}
	gctx := h.getGofrContext(ctx, wrapper)
	
	entryValidator := Validator.NewEntryValidator[*StringIdArgWrapper](wrapper)
	h.validator.SignOut(entryValidator)
	var err error
	err = entryValidator.Validate()
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, err.Error())
	}
	res, err := h.server.SignOut(gctx)
	if err != nil {
		return nil, getStatusCodeError(err)
	}

	resp, ok := res.(*StatusQueryProto)
	if !ok {
		return nil, status.Errorf(codes.Unknown, "unexpected response type %T", res)
	}
	
	return resp, nil
}

// mustEmbedUnimplementedWhatsappServiceServer ensures implementation
func (h *WhatsappServiceServerWrapper) mustEmbedUnimplementedWhatsappServiceServer() {}

// RegisterWhatsappServiceServerWithGofr registers the server
func RegisterWhatsappServiceServerWithGofr(app *gofr.App, srv WhatsappServiceServerWithGofr, val WhatsappServiceValidationWithGofr) {
	registerServerWithGofr(app, srv, val, func(s grpc.ServiceRegistrar, srv any, val any) {
		wrapper := &WhatsappServiceServerWrapper{
			server: srv.(WhatsappServiceServerWithGofr),
			validator: val.(WhatsappServiceValidationWithGofr),
			healthServer: getOrCreateHealthServer(),
		}

		RegisterWhatsappServiceServer(s, wrapper)

		wrapper.Server.SetServingStatus("Hello", healthpb.HealthCheckResponse_SERVING)
	})
}

// getGofrContext creates GoFr context
func (h *WhatsappServiceServerWrapper) getGofrContext(ctx context.Context, req gofr.Request) *gofr.Context {
	return &gofr.Context{
		Context:   ctx,
		Container: h.Container,
		Request:   req,
	}
}

// getStatusCodeError returns the proper status code and error
func getStatusCodeError(err error) error {
	var domainErr *MoneyxErrors.DomainException
	var domainAggregateErr *MoneyxErrors.DomainAggregateLockException
	switch {
	case errors.As(err, &domainErr):
		return status.Errorf(codes.Aborted, domainErr.MessageTemplate, domainErr.DescriptionMetadata)
	case errors.As(err, &domainAggregateErr):
		return status.Errorf(codes.Aborted, domainAggregateErr.MessageTemplate, domainAggregateErr.DescriptionMetadata)
	default:
		return status.Errorf(codes.Unknown, "Something went wrong!")
	}
}
